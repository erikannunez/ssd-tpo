// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ssdtpo.dimensiones_3_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Dimensiones_3 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Dimensiones_3 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Dimensiones_3";
	private final String projectName = "SSDTPO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Dimensiones_3.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Dimensiones_3.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class dim_clienteStruct implements
			routines.system.IPersistableRow<dim_clienteStruct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];

		public int id_cliente;

		public int getId_cliente() {
			return this.id_cliente;
		}

		public int id_ciudad_cliente;

		public int getId_ciudad_cliente() {
			return this.id_ciudad_cliente;
		}

		public String codigo_cliente;

		public String getCodigo_cliente() {
			return this.codigo_cliente;
		}

		public String nombre_cliente;

		public String getNombre_cliente() {
			return this.nombre_cliente;
		}

		public String nombre_contacto;

		public String getNombre_contacto() {
			return this.nombre_contacto;
		}

		public String cargo_contacto;

		public String getCargo_contacto() {
			return this.cargo_contacto;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String codigo_postal;

		public String getCodigo_postal() {
			return this.codigo_postal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.id_cliente = dis.readInt();

					this.id_ciudad_cliente = dis.readInt();

					this.codigo_cliente = readString(dis);

					this.nombre_cliente = readString(dis);

					this.nombre_contacto = readString(dis);

					this.cargo_contacto = readString(dis);

					this.telefono = readString(dis);

					this.fax = readString(dis);

					this.direccion = readString(dis);

					this.codigo_postal = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_cliente);

				// int

				dos.writeInt(this.id_ciudad_cliente);

				// String

				writeString(this.codigo_cliente, dos);

				// String

				writeString(this.nombre_cliente, dos);

				// String

				writeString(this.nombre_contacto, dos);

				// String

				writeString(this.cargo_contacto, dos);

				// String

				writeString(this.telefono, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.direccion, dos);

				// String

				writeString(this.codigo_postal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_cliente=" + String.valueOf(id_cliente));
			sb.append(",id_ciudad_cliente=" + String.valueOf(id_ciudad_cliente));
			sb.append(",codigo_cliente=" + codigo_cliente);
			sb.append(",nombre_cliente=" + nombre_cliente);
			sb.append(",nombre_contacto=" + nombre_contacto);
			sb.append(",cargo_contacto=" + cargo_contacto);
			sb.append(",telefono=" + telefono);
			sb.append(",fax=" + fax);
			sb.append(",direccion=" + direccion);
			sb.append(",codigo_postal=" + codigo_postal);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dim_clienteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];

		public String IDCLIENTE;

		public String getIDCLIENTE() {
			return this.IDCLIENTE;
		}

		public String NOMBRECOMPANIA;

		public String getNOMBRECOMPANIA() {
			return this.NOMBRECOMPANIA;
		}

		public String NOMBRECONTACTO;

		public String getNOMBRECONTACTO() {
			return this.NOMBRECONTACTO;
		}

		public String CARGOCONTACTO;

		public String getCARGOCONTACTO() {
			return this.CARGOCONTACTO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.IDCLIENTE = readString(dis);

					this.NOMBRECOMPANIA = readString(dis);

					this.NOMBRECONTACTO = readString(dis);

					this.CARGOCONTACTO = readString(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELEFONO = readString(dis);

					this.FAX = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDCLIENTE, dos);

				// String

				writeString(this.NOMBRECOMPANIA, dos);

				// String

				writeString(this.NOMBRECONTACTO, dos);

				// String

				writeString(this.CARGOCONTACTO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.FAX, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCLIENTE=" + IDCLIENTE);
			sb.append(",NOMBRECOMPANIA=" + NOMBRECOMPANIA);
			sb.append(",NOMBRECONTACTO=" + NOMBRECONTACTO);
			sb.append(",CARGOCONTACTO=" + CARGOCONTACTO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",FAX=" + FAX);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_2Struct implements
			routines.system.IPersistableRow<after_tDBInput_2Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String IDCLIENTE;

		public String getIDCLIENTE() {
			return this.IDCLIENTE;
		}

		public String NOMBRECOMPANIA;

		public String getNOMBRECOMPANIA() {
			return this.NOMBRECOMPANIA;
		}

		public String NOMBRECONTACTO;

		public String getNOMBRECONTACTO() {
			return this.NOMBRECONTACTO;
		}

		public String CARGOCONTACTO;

		public String getCARGOCONTACTO() {
			return this.CARGOCONTACTO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDCLIENTE == null) ? 0 : this.IDCLIENTE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;

			if (this.IDCLIENTE == null) {
				if (other.IDCLIENTE != null)
					return false;

			} else if (!this.IDCLIENTE.equals(other.IDCLIENTE))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_2Struct other) {

			other.IDCLIENTE = this.IDCLIENTE;
			other.NOMBRECOMPANIA = this.NOMBRECOMPANIA;
			other.NOMBRECONTACTO = this.NOMBRECONTACTO;
			other.CARGOCONTACTO = this.CARGOCONTACTO;
			other.DIRECCION = this.DIRECCION;
			other.CIUDAD = this.CIUDAD;
			other.REGION = this.REGION;
			other.CODPOSTAL = this.CODPOSTAL;
			other.PAIS = this.PAIS;
			other.TELEFONO = this.TELEFONO;
			other.FAX = this.FAX;

		}

		public void copyKeysDataTo(after_tDBInput_2Struct other) {

			other.IDCLIENTE = this.IDCLIENTE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.IDCLIENTE = readString(dis);

					this.NOMBRECOMPANIA = readString(dis);

					this.NOMBRECONTACTO = readString(dis);

					this.CARGOCONTACTO = readString(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELEFONO = readString(dis);

					this.FAX = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IDCLIENTE, dos);

				// String

				writeString(this.NOMBRECOMPANIA, dos);

				// String

				writeString(this.NOMBRECONTACTO, dos);

				// String

				writeString(this.CARGOCONTACTO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.FAX, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCLIENTE=" + IDCLIENTE);
			sb.append(",NOMBRECOMPANIA=" + NOMBRECOMPANIA);
			sb.append(",NOMBRECONTACTO=" + NOMBRECONTACTO);
			sb.append(",CARGOCONTACTO=" + CARGOCONTACTO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",FAX=" + FAX);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDCLIENTE, other.IDCLIENTE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_5Process(globalMap);

				row1Struct row1 = new row1Struct();
				dim_clienteStruct dim_cliente = new dim_clienteStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("dim_cliente"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				class BytesLimit65535_tDBOutput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_3().limitLog4jByte();

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "dim_cliente";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbProperties_tDBOutput_3 = "noDatetimeStringSync=true";
				String url_tDBOutput_3 = null;
				if (dbProperties_tDBOutput_3 == null
						|| dbProperties_tDBOutput_3.trim().length() == 0) {
					url_tDBOutput_3 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_3 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ properties_tDBOutput_3;
				}
				String driverClass_tDBOutput_3 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				String insert_tDBOutput_3 = "INSERT INTO `"
						+ "dim_cliente"
						+ "` (`id_cliente`,`id_ciudad_cliente`,`codigo_cliente`,`nombre_cliente`,`nombre_contacto`,`cargo_contacto`,`telefono`,`fax`,`direccion`,`codigo_postal`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				dim_clienteStruct dim_cliente_tmp = new dim_clienteStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_2);

				String url_tDBInput_2 = "jdbc:ucanaccess://"
						+ "/Users/erikannunez/Documents/GitHub/ssd-tpo/TP_Integrador_BIDW/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_2 = "";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
				atnParamsPrope_tDBInput_2.put("user", dbUser_tDBInput_2);
				atnParamsPrope_tDBInput_2.put("password", dbPwd_tDBInput_2);
				atnParamsPrope_tDBInput_2
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_2.getBytes()));
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(
						url_tDBInput_2, atnParamsPrope_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  CLIENTES.IDCLIENTE, \n  CLIENTES.[NOMBRECOMPAÑÍA], \n  CLIENTES.NOMBRECONTACTO, \n  CLIENTES.CARGOCONTACTO, \n  C"
						+ "LIENTES.[DIRECCIÓN], \n  CLIENTES.CIUDAD, \n  CLIENTES.[REGIÓN], \n  CLIENTES.[CÓDPOSTAL], \n  CLIENTES.[PAÍS], \n  CLIENTES."
						+ "[TELÉFONO], \n  CLIENTES.FAX\nFROM CLIENTES";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row1.IDCLIENTE = null;
						} else {

							row1.IDCLIENTE = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row1.NOMBRECOMPANIA = null;
						} else {

							row1.NOMBRECOMPANIA = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row1.NOMBRECONTACTO = null;
						} else {

							row1.NOMBRECONTACTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row1.CARGOCONTACTO = null;
						} else {

							row1.CARGOCONTACTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row1.DIRECCION = null;
						} else {

							row1.DIRECCION = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row1.CIUDAD = null;
						} else {

							row1.CIUDAD = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row1.REGION = null;
						} else {

							row1.REGION = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row1.CODPOSTAL = null;
						} else {

							row1.CODPOSTAL = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row1.PAIS = null;
						} else {

							row1.PAIS = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row1.TELEFONO = null;
						} else {

							row1.TELEFONO = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row1.FAX = null;
						} else {

							row1.FAX = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 11, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.nombre_ciudad = row1.CIUDAD;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.nombre_ciudad = '"
							// + row2HashKey.nombre_ciudad + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							dim_cliente = null;

							// # Output table : 'dim_cliente'
							dim_cliente_tmp.id_cliente = 0;
							dim_cliente_tmp.id_ciudad_cliente = row2.id_ciudad;
							dim_cliente_tmp.codigo_cliente = row1.IDCLIENTE;
							dim_cliente_tmp.nombre_cliente = row1.NOMBRECOMPANIA;
							dim_cliente_tmp.nombre_contacto = row1.NOMBRECONTACTO;
							dim_cliente_tmp.cargo_contacto = row1.CARGOCONTACTO;
							dim_cliente_tmp.telefono = row1.TELEFONO;
							dim_cliente_tmp.fax = row1.FAX;
							dim_cliente_tmp.direccion = row1.DIRECCION;
							dim_cliente_tmp.codigo_postal = row1.CODPOSTAL;
							dim_cliente = dim_cliente_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "dim_cliente"
						if (dim_cliente != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							// dim_cliente
							// dim_cliente

							if (execStat) {
								runStat.updateStatOnConnection("dim_cliente"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_3 = false;
							pstmt_tDBOutput_3.setInt(1, dim_cliente.id_cliente);

							pstmt_tDBOutput_3.setInt(2,
									dim_cliente.id_ciudad_cliente);

							if (dim_cliente.codigo_cliente == null) {
								pstmt_tDBOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(3,
										dim_cliente.codigo_cliente);
							}

							if (dim_cliente.nombre_cliente == null) {
								pstmt_tDBOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(4,
										dim_cliente.nombre_cliente);
							}

							if (dim_cliente.nombre_contacto == null) {
								pstmt_tDBOutput_3.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(5,
										dim_cliente.nombre_contacto);
							}

							if (dim_cliente.cargo_contacto == null) {
								pstmt_tDBOutput_3.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(6,
										dim_cliente.cargo_contacto);
							}

							if (dim_cliente.telefono == null) {
								pstmt_tDBOutput_3.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(7,
										dim_cliente.telefono);
							}

							if (dim_cliente.fax == null) {
								pstmt_tDBOutput_3.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(8, dim_cliente.fax);
							}

							if (dim_cliente.direccion == null) {
								pstmt_tDBOutput_3.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(9,
										dim_cliente.direccion);
							}

							if (dim_cliente.codigo_postal == null) {
								pstmt_tDBOutput_3.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(10,
										dim_cliente.codigo_postal);
							}

							pstmt_tDBOutput_3.addBatch();
							nb_line_tDBOutput_3++;

							batchSizeCounter_tDBOutput_3++;
							if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_3 = 0;
							}
							commitCounter_tDBOutput_3++;

							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_3.commit();
								commitCounter_tDBOutput_3 = 0;

							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "dim_cliente"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();

				}

				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("dim_cliente"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("finish_tDBOutput_3") == null) {
					if (resourceMap.get("conn_tDBOutput_3") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_3");

							ctn_tDBOutput_3.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
							String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
									+ sqlEx_tDBOutput_3.getMessage();

							System.err.println(errorMessage_tDBOutput_3);
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_ciudad;

		public int getId_ciudad() {
			return this.id_ciudad;
		}

		public Integer id_pais;

		public Integer getId_pais() {
			return this.id_pais;
		}

		public String nombre_ciudad;

		public String getNombre_ciudad() {
			return this.nombre_ciudad;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nombre_ciudad == null) ? 0
								: this.nombre_ciudad.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.nombre_ciudad == null) {
				if (other.nombre_ciudad != null)
					return false;

			} else if (!this.nombre_ciudad.equals(other.nombre_ciudad))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id_ciudad = this.id_ciudad;
			other.id_pais = this.id_pais;
			other.nombre_ciudad = this.nombre_ciudad;
			other.region = this.region;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.nombre_ciudad = this.nombre_ciudad;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.nombre_ciudad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombre_ciudad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_ciudad = dis.readInt();

				this.id_pais = readInteger(dis, ois);

				this.region = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_ciudad);

				writeInteger(this.id_pais, dos, oos);

				writeString(this.region, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_ciudad=" + String.valueOf(id_ciudad));
			sb.append(",id_pais=" + String.valueOf(id_pais));
			sb.append(",nombre_ciudad=" + nombre_ciudad);
			sb.append(",region=" + region);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombre_ciudad,
					other.nombre_ciudad);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				class BytesLimit65535_tAdvancedHash_row2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row2().limitLog4jByte();

				// connection name:row2
				// source node:tDBInput_5 - inputs:(after_tDBInput_2)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2)
				// outputs:(dim_cliente)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				class BytesLimit65535_tDBInput_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_5().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "root";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(
						url_tDBInput_5, dbUser_tDBInput_5, dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n  `dim_ciudad`.`id_ciudad`, \n  `dim_ciudad`.`id_pais`, \n  `dim_ciudad`.`nombre_ciudad`, \n  `dim_ciudad`.`region"
						+ "`\nFROM `dim_ciudad`";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row2.id_ciudad = 0;
						} else {

							if (rs_tDBInput_5.getObject(1) != null) {
								row2.id_ciudad = rs_tDBInput_5.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row2.id_pais = null;
						} else {

							if (rs_tDBInput_5.getObject(2) != null) {
								row2.id_pais = rs_tDBInput_5.getInt(2);
							} else {
								row2.id_pais = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row2.nombre_ciudad = null;
						} else {

							row2.nombre_ciudad = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row2.region = null;
						} else {

							row2.region = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 4, false);
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id_ciudad = row2.id_ciudad;

						row2_HashRow.id_pais = row2.id_pais;

						row2_HashRow.nombre_ciudad = row2.nombre_ciudad;

						row2_HashRow.region = row2.region;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					stmt_tDBInput_5.close();
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

					}

				}

				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class dim_empleadoStruct implements
			routines.system.IPersistableRow<dim_empleadoStruct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];

		public int id_empleado;

		public int getId_empleado() {
			return this.id_empleado;
		}

		public int id_cargo;

		public int getId_cargo() {
			return this.id_cargo;
		}

		public int id_tratamiento;

		public int getId_tratamiento() {
			return this.id_tratamiento;
		}

		public int id_ciudad;

		public int getId_ciudad() {
			return this.id_ciudad;
		}

		public Integer codigo_empleado;

		public Integer getCodigo_empleado() {
			return this.codigo_empleado;
		}

		public String apellido;

		public String getApellido() {
			return this.apellido;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public java.util.Date fecha_nacimiento;

		public java.util.Date getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public java.util.Date fecha_contratacion;

		public java.util.Date getFecha_contratacion() {
			return this.fecha_contratacion;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String codigo_postal;

		public String getCodigo_postal() {
			return this.codigo_postal;
		}

		public String telefono_domicilio;

		public String getTelefono_domicilio() {
			return this.telefono_domicilio;
		}

		public String extension;

		public String getExtension() {
			return this.extension;
		}

		public String foto;

		public String getFoto() {
			return this.foto;
		}

		public String nota;

		public String getNota() {
			return this.nota;
		}

		public Integer jefe;

		public Integer getJefe() {
			return this.jefe;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.id_empleado = dis.readInt();

					this.id_cargo = dis.readInt();

					this.id_tratamiento = dis.readInt();

					this.id_ciudad = dis.readInt();

					this.codigo_empleado = readInteger(dis);

					this.apellido = readString(dis);

					this.nombre = readString(dis);

					this.fecha_nacimiento = readDate(dis);

					this.fecha_contratacion = readDate(dis);

					this.direccion = readString(dis);

					this.codigo_postal = readString(dis);

					this.telefono_domicilio = readString(dis);

					this.extension = readString(dis);

					this.foto = readString(dis);

					this.nota = readString(dis);

					this.jefe = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_empleado);

				// int

				dos.writeInt(this.id_cargo);

				// int

				dos.writeInt(this.id_tratamiento);

				// int

				dos.writeInt(this.id_ciudad);

				// Integer

				writeInteger(this.codigo_empleado, dos);

				// String

				writeString(this.apellido, dos);

				// String

				writeString(this.nombre, dos);

				// java.util.Date

				writeDate(this.fecha_nacimiento, dos);

				// java.util.Date

				writeDate(this.fecha_contratacion, dos);

				// String

				writeString(this.direccion, dos);

				// String

				writeString(this.codigo_postal, dos);

				// String

				writeString(this.telefono_domicilio, dos);

				// String

				writeString(this.extension, dos);

				// String

				writeString(this.foto, dos);

				// String

				writeString(this.nota, dos);

				// Integer

				writeInteger(this.jefe, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_empleado=" + String.valueOf(id_empleado));
			sb.append(",id_cargo=" + String.valueOf(id_cargo));
			sb.append(",id_tratamiento=" + String.valueOf(id_tratamiento));
			sb.append(",id_ciudad=" + String.valueOf(id_ciudad));
			sb.append(",codigo_empleado=" + String.valueOf(codigo_empleado));
			sb.append(",apellido=" + apellido);
			sb.append(",nombre=" + nombre);
			sb.append(",fecha_nacimiento=" + String.valueOf(fecha_nacimiento));
			sb.append(",fecha_contratacion="
					+ String.valueOf(fecha_contratacion));
			sb.append(",direccion=" + direccion);
			sb.append(",codigo_postal=" + codigo_postal);
			sb.append(",telefono_domicilio=" + telefono_domicilio);
			sb.append(",extension=" + extension);
			sb.append(",foto=" + foto);
			sb.append(",nota=" + nota);
			sb.append(",jefe=" + String.valueOf(jefe));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dim_empleadoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];

		public Integer IDEMPLEADO;

		public Integer getIDEMPLEADO() {
			return this.IDEMPLEADO;
		}

		public String APELLIDOS;

		public String getAPELLIDOS() {
			return this.APELLIDOS;
		}

		public String NOMBRE;

		public String getNOMBRE() {
			return this.NOMBRE;
		}

		public String CARGO;

		public String getCARGO() {
			return this.CARGO;
		}

		public String TRATAMIENTO;

		public String getTRATAMIENTO() {
			return this.TRATAMIENTO;
		}

		public java.util.Date FECHANACIMIENTO;

		public java.util.Date getFECHANACIMIENTO() {
			return this.FECHANACIMIENTO;
		}

		public java.util.Date FECHACONTRATACION;

		public java.util.Date getFECHACONTRATACION() {
			return this.FECHACONTRATACION;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELDOMICILIO;

		public String getTELDOMICILIO() {
			return this.TELDOMICILIO;
		}

		public String EXTENSION;

		public String getEXTENSION() {
			return this.EXTENSION;
		}

		public String FOTO;

		public String getFOTO() {
			return this.FOTO;
		}

		public String NOTAS;

		public String getNOTAS() {
			return this.NOTAS;
		}

		public Integer JEFE;

		public Integer getJEFE() {
			return this.JEFE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.IDEMPLEADO = readInteger(dis);

					this.APELLIDOS = readString(dis);

					this.NOMBRE = readString(dis);

					this.CARGO = readString(dis);

					this.TRATAMIENTO = readString(dis);

					this.FECHANACIMIENTO = readDate(dis);

					this.FECHACONTRATACION = readDate(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELDOMICILIO = readString(dis);

					this.EXTENSION = readString(dis);

					this.FOTO = readString(dis);

					this.NOTAS = readString(dis);

					this.JEFE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDEMPLEADO, dos);

				// String

				writeString(this.APELLIDOS, dos);

				// String

				writeString(this.NOMBRE, dos);

				// String

				writeString(this.CARGO, dos);

				// String

				writeString(this.TRATAMIENTO, dos);

				// java.util.Date

				writeDate(this.FECHANACIMIENTO, dos);

				// java.util.Date

				writeDate(this.FECHACONTRATACION, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELDOMICILIO, dos);

				// String

				writeString(this.EXTENSION, dos);

				// String

				writeString(this.FOTO, dos);

				// String

				writeString(this.NOTAS, dos);

				// Integer

				writeInteger(this.JEFE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDEMPLEADO=" + String.valueOf(IDEMPLEADO));
			sb.append(",APELLIDOS=" + APELLIDOS);
			sb.append(",NOMBRE=" + NOMBRE);
			sb.append(",CARGO=" + CARGO);
			sb.append(",TRATAMIENTO=" + TRATAMIENTO);
			sb.append(",FECHANACIMIENTO=" + String.valueOf(FECHANACIMIENTO));
			sb.append(",FECHACONTRATACION=" + String.valueOf(FECHACONTRATACION));
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELDOMICILIO=" + TELDOMICILIO);
			sb.append(",EXTENSION=" + EXTENSION);
			sb.append(",FOTO=" + FOTO);
			sb.append(",NOTAS=" + NOTAS);
			sb.append(",JEFE=" + String.valueOf(JEFE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_7Struct implements
			routines.system.IPersistableRow<after_tDBInput_7Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IDEMPLEADO;

		public Integer getIDEMPLEADO() {
			return this.IDEMPLEADO;
		}

		public String APELLIDOS;

		public String getAPELLIDOS() {
			return this.APELLIDOS;
		}

		public String NOMBRE;

		public String getNOMBRE() {
			return this.NOMBRE;
		}

		public String CARGO;

		public String getCARGO() {
			return this.CARGO;
		}

		public String TRATAMIENTO;

		public String getTRATAMIENTO() {
			return this.TRATAMIENTO;
		}

		public java.util.Date FECHANACIMIENTO;

		public java.util.Date getFECHANACIMIENTO() {
			return this.FECHANACIMIENTO;
		}

		public java.util.Date FECHACONTRATACION;

		public java.util.Date getFECHACONTRATACION() {
			return this.FECHACONTRATACION;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELDOMICILIO;

		public String getTELDOMICILIO() {
			return this.TELDOMICILIO;
		}

		public String EXTENSION;

		public String getEXTENSION() {
			return this.EXTENSION;
		}

		public String FOTO;

		public String getFOTO() {
			return this.FOTO;
		}

		public String NOTAS;

		public String getNOTAS() {
			return this.NOTAS;
		}

		public Integer JEFE;

		public Integer getJEFE() {
			return this.JEFE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDEMPLEADO == null) ? 0 : this.IDEMPLEADO
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_7Struct other = (after_tDBInput_7Struct) obj;

			if (this.IDEMPLEADO == null) {
				if (other.IDEMPLEADO != null)
					return false;

			} else if (!this.IDEMPLEADO.equals(other.IDEMPLEADO))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_7Struct other) {

			other.IDEMPLEADO = this.IDEMPLEADO;
			other.APELLIDOS = this.APELLIDOS;
			other.NOMBRE = this.NOMBRE;
			other.CARGO = this.CARGO;
			other.TRATAMIENTO = this.TRATAMIENTO;
			other.FECHANACIMIENTO = this.FECHANACIMIENTO;
			other.FECHACONTRATACION = this.FECHACONTRATACION;
			other.DIRECCION = this.DIRECCION;
			other.CIUDAD = this.CIUDAD;
			other.REGION = this.REGION;
			other.CODPOSTAL = this.CODPOSTAL;
			other.PAIS = this.PAIS;
			other.TELDOMICILIO = this.TELDOMICILIO;
			other.EXTENSION = this.EXTENSION;
			other.FOTO = this.FOTO;
			other.NOTAS = this.NOTAS;
			other.JEFE = this.JEFE;

		}

		public void copyKeysDataTo(after_tDBInput_7Struct other) {

			other.IDEMPLEADO = this.IDEMPLEADO;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.IDEMPLEADO = readInteger(dis);

					this.APELLIDOS = readString(dis);

					this.NOMBRE = readString(dis);

					this.CARGO = readString(dis);

					this.TRATAMIENTO = readString(dis);

					this.FECHANACIMIENTO = readDate(dis);

					this.FECHACONTRATACION = readDate(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELDOMICILIO = readString(dis);

					this.EXTENSION = readString(dis);

					this.FOTO = readString(dis);

					this.NOTAS = readString(dis);

					this.JEFE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDEMPLEADO, dos);

				// String

				writeString(this.APELLIDOS, dos);

				// String

				writeString(this.NOMBRE, dos);

				// String

				writeString(this.CARGO, dos);

				// String

				writeString(this.TRATAMIENTO, dos);

				// java.util.Date

				writeDate(this.FECHANACIMIENTO, dos);

				// java.util.Date

				writeDate(this.FECHACONTRATACION, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELDOMICILIO, dos);

				// String

				writeString(this.EXTENSION, dos);

				// String

				writeString(this.FOTO, dos);

				// String

				writeString(this.NOTAS, dos);

				// Integer

				writeInteger(this.JEFE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDEMPLEADO=" + String.valueOf(IDEMPLEADO));
			sb.append(",APELLIDOS=" + APELLIDOS);
			sb.append(",NOMBRE=" + NOMBRE);
			sb.append(",CARGO=" + CARGO);
			sb.append(",TRATAMIENTO=" + TRATAMIENTO);
			sb.append(",FECHANACIMIENTO=" + String.valueOf(FECHANACIMIENTO));
			sb.append(",FECHACONTRATACION=" + String.valueOf(FECHACONTRATACION));
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELDOMICILIO=" + TELDOMICILIO);
			sb.append(",EXTENSION=" + EXTENSION);
			sb.append(",FOTO=" + FOTO);
			sb.append(",NOTAS=" + NOTAS);
			sb.append(",JEFE=" + String.valueOf(JEFE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDEMPLEADO,
					other.IDEMPLEADO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_11Process(globalMap);
				tDBInput_13Process(globalMap);
				tDBInput_15Process(globalMap);

				row3Struct row3 = new row3Struct();
				dim_empleadoStruct dim_empleado = new dim_empleadoStruct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("dim_empleado"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				class BytesLimit65535_tDBOutput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_7().limitLog4jByte();

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;

				int rejectedCount_tDBOutput_7 = 0;

				String tableName_tDBOutput_7 = "dim_empleado";
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				long date_tDBOutput_7;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbProperties_tDBOutput_7 = "noDatetimeStringSync=true";
				String url_tDBOutput_7 = null;
				if (dbProperties_tDBOutput_7 == null
						|| dbProperties_tDBOutput_7.trim().length() == 0) {
					url_tDBOutput_7 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_7 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ properties_tDBOutput_7;
				}
				String driverClass_tDBOutput_7 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_7 = "root";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				java.lang.Class.forName(driverClass_tDBOutput_7);

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;

				String insert_tDBOutput_7 = "INSERT INTO `"
						+ "dim_empleado"
						+ "` (`id_empleado`,`id_cargo`,`id_tratamiento`,`id_ciudad`,`codigo_empleado`,`apellido`,`nombre`,`fecha_nacimiento`,`fecha_contratacion`,`direccion`,`codigo_postal`,`telefono_domicilio`,`extension`,`foto`,`nota`,`jefe`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_7 = 100;
				int batchSizeCounter_tDBOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				dim_empleadoStruct dim_empleado_tmp = new dim_empleadoStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				class BytesLimit65535_tDBInput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_7().limitLog4jByte();

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_7);

				String url_tDBInput_7 = "jdbc:ucanaccess://"
						+ "/Users/erikannunez/Documents/GitHub/ssd-tpo/TP_Integrador_BIDW/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_7 = "";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String atnParams_tDBInput_7 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_7 = atnParams_tDBInput_7.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_7 = new java.util.Properties();
				atnParamsPrope_tDBInput_7.put("user", dbUser_tDBInput_7);
				atnParamsPrope_tDBInput_7.put("password", dbPwd_tDBInput_7);
				atnParamsPrope_tDBInput_7
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_7.getBytes()));
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, atnParamsPrope_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "SELECT \n  EMPLEADOS.IDEMPLEADO, \n  EMPLEADOS.APELLIDOS, \n  EMPLEADOS.NOMBRE, \n  EMPLEADOS.CARGO, \n  EMPLEADOS.TRATAMIEN"
						+ "TO, \n  EMPLEADOS.FECHANACIMIENTO, \n  EMPLEADOS.[FECHACONTRATACIÓN], \n  EMPLEADOS.[DIRECCIÓN], \n  EMPLEADOS.CIUDAD, \n  EM"
						+ "PLEADOS.[REGIÓN], \n  EMPLEADOS.[CÓDPOSTAL], \n  EMPLEADOS.[PAÍS], \n  EMPLEADOS.TELDOMICILIO, \n  EMPLEADOS.[EXTENSIÓN], \n "
						+ " EMPLEADOS.FOTO, \n  EMPLEADOS.NOTAS, \n  EMPLEADOS.JEFE\nFROM EMPLEADOS";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row3.IDEMPLEADO = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row3.IDEMPLEADO = rs_tDBInput_7.getInt(1);
							} else {
								row3.IDEMPLEADO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row3.APELLIDOS = null;
						} else {

							row3.APELLIDOS = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 2, false);
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row3.NOMBRE = null;
						} else {

							row3.NOMBRE = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 3, false);
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row3.CARGO = null;
						} else {

							row3.CARGO = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 4, false);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row3.TRATAMIENTO = null;
						} else {

							row3.TRATAMIENTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 5, false);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row3.FECHANACIMIENTO = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_7 = rs_tDBInput_7
									.getTimestamp(6);
							if (timestamp_tDBInput_7 != null) {
								row3.FECHANACIMIENTO = new java.util.Date(
										timestamp_tDBInput_7.getTime());
							} else {
								row3.FECHANACIMIENTO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row3.FECHACONTRATACION = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_7 = rs_tDBInput_7
									.getTimestamp(7);
							if (timestamp_tDBInput_7 != null) {
								row3.FECHACONTRATACION = new java.util.Date(
										timestamp_tDBInput_7.getTime());
							} else {
								row3.FECHACONTRATACION = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row3.DIRECCION = null;
						} else {

							row3.DIRECCION = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 8, false);
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row3.CIUDAD = null;
						} else {

							row3.CIUDAD = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 9, false);
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row3.REGION = null;
						} else {

							row3.REGION = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 10, false);
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row3.CODPOSTAL = null;
						} else {

							row3.CODPOSTAL = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 11, false);
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row3.PAIS = null;
						} else {

							row3.PAIS = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 12, false);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row3.TELDOMICILIO = null;
						} else {

							row3.TELDOMICILIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row3.EXTENSION = null;
						} else {

							row3.EXTENSION = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 14, false);
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row3.FOTO = null;
						} else {

							row3.FOTO = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 15, false);
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row3.NOTAS = null;
						} else {

							row3.NOTAS = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 16, false);
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row3.JEFE = null;
						} else {

							if (rs_tDBInput_7.getObject(17) != null) {
								row3.JEFE = rs_tDBInput_7.getInt(17);
							} else {
								row3.JEFE = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row4HashKey.nombre_tratamiento = row3.TRATAMIENTO;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.nombre_tratamiento = '"
							// + row4HashKey.nombre_tratamiento + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row5HashKey.nombre_cargo = row3.CARGO;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.nombre_cargo = '"
							// + row5HashKey.nombre_cargo + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row6HashKey.nombre_ciudad = row3.CIUDAD;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.nombre_ciudad = '"
							// + row6HashKey.nombre_ciudad + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							dim_empleado = null;

							// # Output table : 'dim_empleado'
							dim_empleado_tmp.id_empleado = 0;
							dim_empleado_tmp.id_cargo = row5.id_cargo;
							dim_empleado_tmp.id_tratamiento = row4.id_tratamiento;
							dim_empleado_tmp.id_ciudad = row6.id_ciudad;
							dim_empleado_tmp.codigo_empleado = row3.IDEMPLEADO;
							dim_empleado_tmp.apellido = row3.APELLIDOS;
							dim_empleado_tmp.nombre = row3.NOMBRE;
							dim_empleado_tmp.fecha_nacimiento = row3.FECHANACIMIENTO;
							dim_empleado_tmp.fecha_contratacion = row3.FECHACONTRATACION;
							dim_empleado_tmp.direccion = row3.DIRECCION;
							dim_empleado_tmp.codigo_postal = row3.CODPOSTAL;
							dim_empleado_tmp.telefono_domicilio = row3.TELDOMICILIO;
							dim_empleado_tmp.extension = row3.EXTENSION;
							dim_empleado_tmp.foto = row3.FOTO;
							dim_empleado_tmp.nota = row3.NOTAS;
							dim_empleado_tmp.jefe = row3.JEFE;
							dim_empleado = dim_empleado_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
						// Start of branch "dim_empleado"
						if (dim_empleado != null) {

							/**
							 * [tDBOutput_7 main ] start
							 */

							currentComponent = "tDBOutput_7";

							// dim_empleado
							// dim_empleado

							if (execStat) {
								runStat.updateStatOnConnection("dim_empleado"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_7 = false;
							pstmt_tDBOutput_7.setInt(1,
									dim_empleado.id_empleado);

							pstmt_tDBOutput_7.setInt(2, dim_empleado.id_cargo);

							pstmt_tDBOutput_7.setInt(3,
									dim_empleado.id_tratamiento);

							pstmt_tDBOutput_7.setInt(4, dim_empleado.id_ciudad);

							if (dim_empleado.codigo_empleado == null) {
								pstmt_tDBOutput_7.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_7.setInt(5,
										dim_empleado.codigo_empleado);
							}

							if (dim_empleado.apellido == null) {
								pstmt_tDBOutput_7.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(6,
										dim_empleado.apellido);
							}

							if (dim_empleado.nombre == null) {
								pstmt_tDBOutput_7.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(7,
										dim_empleado.nombre);
							}

							if (dim_empleado.fecha_nacimiento != null) {
								date_tDBOutput_7 = dim_empleado.fecha_nacimiento
										.getTime();
								if (date_tDBOutput_7 < year1_tDBOutput_7
										|| date_tDBOutput_7 >= year10000_tDBOutput_7) {
									pstmt_tDBOutput_7.setString(8,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_7.setTimestamp(8,
											new java.sql.Timestamp(
													date_tDBOutput_7));
								}
							} else {
								pstmt_tDBOutput_7.setNull(8,
										java.sql.Types.DATE);
							}

							if (dim_empleado.fecha_contratacion != null) {
								date_tDBOutput_7 = dim_empleado.fecha_contratacion
										.getTime();
								if (date_tDBOutput_7 < year1_tDBOutput_7
										|| date_tDBOutput_7 >= year10000_tDBOutput_7) {
									pstmt_tDBOutput_7.setString(9,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_7.setTimestamp(9,
											new java.sql.Timestamp(
													date_tDBOutput_7));
								}
							} else {
								pstmt_tDBOutput_7.setNull(9,
										java.sql.Types.DATE);
							}

							if (dim_empleado.direccion == null) {
								pstmt_tDBOutput_7.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(10,
										dim_empleado.direccion);
							}

							if (dim_empleado.codigo_postal == null) {
								pstmt_tDBOutput_7.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(11,
										dim_empleado.codigo_postal);
							}

							if (dim_empleado.telefono_domicilio == null) {
								pstmt_tDBOutput_7.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(12,
										dim_empleado.telefono_domicilio);
							}

							if (dim_empleado.extension == null) {
								pstmt_tDBOutput_7.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(13,
										dim_empleado.extension);
							}

							if (dim_empleado.foto == null) {
								pstmt_tDBOutput_7.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(14,
										dim_empleado.foto);
							}

							if (dim_empleado.nota == null) {
								pstmt_tDBOutput_7.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(15,
										dim_empleado.nota);
							}

							if (dim_empleado.jefe == null) {
								pstmt_tDBOutput_7.setNull(16,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_7.setInt(16, dim_empleado.jefe);
							}

							pstmt_tDBOutput_7.addBatch();
							nb_line_tDBOutput_7++;

							batchSizeCounter_tDBOutput_7++;
							if (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
								try {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_7 = 0;
							}
							commitCounter_tDBOutput_7++;

							if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

								try {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_7.commit();
								commitCounter_tDBOutput_7 = 0;

							}

							tos_count_tDBOutput_7++;

							/**
							 * [tDBOutput_7 main ] stop
							 */

							/**
							 * [tDBOutput_7 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_7";

							/**
							 * [tDBOutput_7 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_7 process_data_end ] start
							 */

							currentComponent = "tDBOutput_7";

							/**
							 * [tDBOutput_7 process_data_end ] stop
							 */

						} // End of branch "dim_empleado"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					stmt_tDBInput_7.close();

					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (batchSizeCounter_tDBOutput_7 != 0) {
						int countSum_tDBOutput_7 = 0;

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_7 = 0;

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();

				}

				if (commitCounter_tDBOutput_7 > 0) {

					conn_tDBOutput_7.commit();

				}

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("dim_empleado"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("finish_tDBOutput_7") == null) {
					if (resourceMap.get("conn_tDBOutput_7") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_7");

							ctn_tDBOutput_7.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
							String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
									+ sqlEx_tDBOutput_7.getMessage();

							System.err.println(errorMessage_tDBOutput_7);
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_tratamiento;

		public int getId_tratamiento() {
			return this.id_tratamiento;
		}

		public String nombre_tratamiento;

		public String getNombre_tratamiento() {
			return this.nombre_tratamiento;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nombre_tratamiento == null) ? 0
								: this.nombre_tratamiento.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.nombre_tratamiento == null) {
				if (other.nombre_tratamiento != null)
					return false;

			} else if (!this.nombre_tratamiento
					.equals(other.nombre_tratamiento))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_tratamiento = this.id_tratamiento;
			other.nombre_tratamiento = this.nombre_tratamiento;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.nombre_tratamiento = this.nombre_tratamiento;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.nombre_tratamiento = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombre_tratamiento, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_tratamiento = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_tratamiento);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tratamiento=" + String.valueOf(id_tratamiento));
			sb.append(",nombre_tratamiento=" + nombre_tratamiento);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombre_tratamiento,
					other.nombre_tratamiento);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tDBInput_11 - inputs:(after_tDBInput_7)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row5,row6)
				// outputs:(dim_empleado)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				class BytesLimit65535_tDBInput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_11().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_11 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_11 = calendar_tDBInput_11
						.getTime();
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = "root";

				final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String url_tDBInput_11 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_11 = java.sql.DriverManager.getConnection(
						url_tDBInput_11, dbUser_tDBInput_11, dbPwd_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11
						.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  `dim_tratamientoEmpleado`.`id_tratamiento`, \n  `dim_tratamientoEmpleado`.`nombre_tratamiento`\nFROM `dim_trata"
						+ "mientoEmpleado`";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11
							.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11
							.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11
							.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row4.id_tratamiento = 0;
						} else {

							if (rs_tDBInput_11.getObject(1) != null) {
								row4.id_tratamiento = rs_tDBInput_11.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row4.nombre_tratamiento = null;
						} else {

							row4.nombre_tratamiento = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 2, false);
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.id_tratamiento = row4.id_tratamiento;

						row4_HashRow.nombre_tratamiento = row4.nombre_tratamiento;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					stmt_tDBInput_11.close();
					if (conn_tDBInput_11 != null
							&& !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

					}

				}

				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_cargo;

		public int getId_cargo() {
			return this.id_cargo;
		}

		public String nombre_cargo;

		public String getNombre_cargo() {
			return this.nombre_cargo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nombre_cargo == null) ? 0 : this.nombre_cargo
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.nombre_cargo == null) {
				if (other.nombre_cargo != null)
					return false;

			} else if (!this.nombre_cargo.equals(other.nombre_cargo))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id_cargo = this.id_cargo;
			other.nombre_cargo = this.nombre_cargo;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.nombre_cargo = this.nombre_cargo;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.nombre_cargo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombre_cargo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_cargo = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_cargo);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_cargo=" + String.valueOf(id_cargo));
			sb.append(",nombre_cargo=" + nombre_cargo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombre_cargo,
					other.nombre_cargo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				class BytesLimit65535_tAdvancedHash_row5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row5().limitLog4jByte();

				// connection name:row5
				// source node:tDBInput_13 - inputs:(after_tDBInput_7)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 -
				// inputs:(row5) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row5,row6)
				// outputs:(dim_empleado)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				class BytesLimit65535_tDBInput_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_13().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_13 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_13.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_13 = calendar_tDBInput_13
						.getTime();
				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = "root";

				final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String url_tDBInput_13 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(
						url_tDBInput_13, dbUser_tDBInput_13, dbPwd_tDBInput_13);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13
						.createStatement();

				String dbquery_tDBInput_13 = "SELECT \n  `dim_cargo`.`id_cargo`, \n  `dim_cargo`.`nombre_cargo`\nFROM `dim_cargo`";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13
							.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13
							.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13
							.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row5.id_cargo = 0;
						} else {

							if (rs_tDBInput_13.getObject(1) != null) {
								row5.id_cargo = rs_tDBInput_13.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row5.nombre_cargo = null;
						} else {

							row5.nombre_cargo = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 2, false);
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.id_cargo = row5.id_cargo;

						row5_HashRow.nombre_cargo = row5.nombre_cargo;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					stmt_tDBInput_13.close();
					if (conn_tDBInput_13 != null
							&& !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

					}

				}

				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_3 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_3 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_ciudad;

		public int getId_ciudad() {
			return this.id_ciudad;
		}

		public Integer id_pais;

		public Integer getId_pais() {
			return this.id_pais;
		}

		public String nombre_ciudad;

		public String getNombre_ciudad() {
			return this.nombre_ciudad;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nombre_ciudad == null) ? 0
								: this.nombre_ciudad.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.nombre_ciudad == null) {
				if (other.nombre_ciudad != null)
					return false;

			} else if (!this.nombre_ciudad.equals(other.nombre_ciudad))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_ciudad = this.id_ciudad;
			other.id_pais = this.id_pais;
			other.nombre_ciudad = this.nombre_ciudad;
			other.region = this.region;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.nombre_ciudad = this.nombre_ciudad;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_3.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_3.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_3, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_3) {

				try {

					int length = 0;

					this.nombre_ciudad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombre_ciudad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_ciudad = dis.readInt();

				this.id_pais = readInteger(dis, ois);

				this.region = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_ciudad);

				writeInteger(this.id_pais, dos, oos);

				writeString(this.region, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_ciudad=" + String.valueOf(id_ciudad));
			sb.append(",id_pais=" + String.valueOf(id_pais));
			sb.append(",nombre_ciudad=" + nombre_ciudad);
			sb.append(",region=" + region);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombre_ciudad,
					other.nombre_ciudad);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				class BytesLimit65535_tAdvancedHash_row6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row6().limitLog4jByte();

				// connection name:row6
				// source node:tDBInput_15 - inputs:(after_tDBInput_7)
				// outputs:(row6,row6) | target node:tAdvancedHash_row6 -
				// inputs:(row6) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row5,row6)
				// outputs:(dim_empleado)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				class BytesLimit65535_tDBInput_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_15().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_15 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_15.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_15 = calendar_tDBInput_15
						.getTime();
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "root";

				final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String url_tDBInput_15 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(
						url_tDBInput_15, dbUser_tDBInput_15, dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15
						.createStatement();

				String dbquery_tDBInput_15 = "SELECT \n  `dim_ciudad`.`id_ciudad`, \n  `dim_ciudad`.`id_pais`, \n  `dim_ciudad`.`nombre_ciudad`, \n  `dim_ciudad`.`region"
						+ "`\nFROM `dim_ciudad`";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15
							.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15
							.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15
							.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row6.id_ciudad = 0;
						} else {

							if (rs_tDBInput_15.getObject(1) != null) {
								row6.id_ciudad = rs_tDBInput_15.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row6.id_pais = null;
						} else {

							if (rs_tDBInput_15.getObject(2) != null) {
								row6.id_pais = rs_tDBInput_15.getInt(2);
							} else {
								row6.id_pais = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row6.nombre_ciudad = null;
						} else {

							row6.nombre_ciudad = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 3, false);
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row6.region = null;
						} else {

							row6.region = routines.system.JDBCUtil.getString(
									rs_tDBInput_15, 4, false);
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.id_ciudad = row6.id_ciudad;

						row6_HashRow.id_pais = row6.id_pais;

						row6_HashRow.nombre_ciudad = row6.nombre_ciudad;

						row6_HashRow.region = row6.region;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					stmt_tDBInput_15.close();
					if (conn_tDBInput_15 != null
							&& !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

					}

				}

				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Dimensiones_3 Dimensiones_3Class = new Dimensiones_3();

		int exitCode = Dimensiones_3Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Dimensiones_3.class
					.getClassLoader().getResourceAsStream(
							"ssdtpo/dimensiones_3_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = Dimensiones_3.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_7) {
			globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

			e_tDBInput_7.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Dimensiones_3");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 189281 characters generated by Talend Open Studio for Data Integration on the
 * 31 de octubre de 2018 14:12:01 ART
 ************************************************************************************************/
