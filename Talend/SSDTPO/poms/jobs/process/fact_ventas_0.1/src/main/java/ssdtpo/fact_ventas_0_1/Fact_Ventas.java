// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ssdtpo.fact_ventas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Fact_Ventas Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Fact_Ventas implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Fact_Ventas";
	private final String projectName = "SSDTPO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();
	private RunTrace runTrace = new RunTrace();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Fact_Ventas.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Fact_Ventas.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_17_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_19_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_21_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_23_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class fact_ventasStruct implements
			routines.system.IPersistableRow<fact_ventasStruct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_venta;

		public int getId_venta() {
			return this.id_venta;
		}

		public int id_cliente;

		public int getId_cliente() {
			return this.id_cliente;
		}

		public int id_empleado;

		public int getId_empleado() {
			return this.id_empleado;
		}

		public int id_fecha_pedido;

		public int getId_fecha_pedido() {
			return this.id_fecha_pedido;
		}

		public int id_fecha_entrega;

		public int getId_fecha_entrega() {
			return this.id_fecha_entrega;
		}

		public int id_fecha_envio;

		public int getId_fecha_envio() {
			return this.id_fecha_envio;
		}

		public int id_compania_envios;

		public int getId_compania_envios() {
			return this.id_compania_envios;
		}

		public int id_producto;

		public int getId_producto() {
			return this.id_producto;
		}

		public Integer codigo_venta;

		public Integer getCodigo_venta() {
			return this.codigo_venta;
		}

		public Double cargo_envio;

		public Double getCargo_envio() {
			return this.cargo_envio;
		}

		public Double precio_venta;

		public Double getPrecio_venta() {
			return this.precio_venta;
		}

		public Integer cantidad;

		public Integer getCantidad() {
			return this.cantidad;
		}

		public Double descuento;

		public Double getDescuento() {
			return this.descuento;
		}

		public Double subtotal_venta;

		public Double getSubtotal_venta() {
			return this.subtotal_venta;
		}

		public Double total_venta;

		public Double getTotal_venta() {
			return this.total_venta;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_venta;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fact_ventasStruct other = (fact_ventasStruct) obj;

			if (this.id_venta != other.id_venta)
				return false;

			return true;
		}

		public void copyDataTo(fact_ventasStruct other) {

			other.id_venta = this.id_venta;
			other.id_cliente = this.id_cliente;
			other.id_empleado = this.id_empleado;
			other.id_fecha_pedido = this.id_fecha_pedido;
			other.id_fecha_entrega = this.id_fecha_entrega;
			other.id_fecha_envio = this.id_fecha_envio;
			other.id_compania_envios = this.id_compania_envios;
			other.id_producto = this.id_producto;
			other.codigo_venta = this.codigo_venta;
			other.cargo_envio = this.cargo_envio;
			other.precio_venta = this.precio_venta;
			other.cantidad = this.cantidad;
			other.descuento = this.descuento;
			other.subtotal_venta = this.subtotal_venta;
			other.total_venta = this.total_venta;

		}

		public void copyKeysDataTo(fact_ventasStruct other) {

			other.id_venta = this.id_venta;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.id_venta = dis.readInt();

					this.id_cliente = dis.readInt();

					this.id_empleado = dis.readInt();

					this.id_fecha_pedido = dis.readInt();

					this.id_fecha_entrega = dis.readInt();

					this.id_fecha_envio = dis.readInt();

					this.id_compania_envios = dis.readInt();

					this.id_producto = dis.readInt();

					this.codigo_venta = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cargo_envio = null;
					} else {
						this.cargo_envio = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.precio_venta = null;
					} else {
						this.precio_venta = dis.readDouble();
					}

					this.cantidad = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.descuento = null;
					} else {
						this.descuento = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.subtotal_venta = null;
					} else {
						this.subtotal_venta = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_venta = null;
					} else {
						this.total_venta = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_venta);

				// int

				dos.writeInt(this.id_cliente);

				// int

				dos.writeInt(this.id_empleado);

				// int

				dos.writeInt(this.id_fecha_pedido);

				// int

				dos.writeInt(this.id_fecha_entrega);

				// int

				dos.writeInt(this.id_fecha_envio);

				// int

				dos.writeInt(this.id_compania_envios);

				// int

				dos.writeInt(this.id_producto);

				// Integer

				writeInteger(this.codigo_venta, dos);

				// Double

				if (this.cargo_envio == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cargo_envio);
				}

				// Double

				if (this.precio_venta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.precio_venta);
				}

				// Integer

				writeInteger(this.cantidad, dos);

				// Double

				if (this.descuento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.descuento);
				}

				// Double

				if (this.subtotal_venta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.subtotal_venta);
				}

				// Double

				if (this.total_venta == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.total_venta);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_venta=" + String.valueOf(id_venta));
			sb.append(",id_cliente=" + String.valueOf(id_cliente));
			sb.append(",id_empleado=" + String.valueOf(id_empleado));
			sb.append(",id_fecha_pedido=" + String.valueOf(id_fecha_pedido));
			sb.append(",id_fecha_entrega=" + String.valueOf(id_fecha_entrega));
			sb.append(",id_fecha_envio=" + String.valueOf(id_fecha_envio));
			sb.append(",id_compania_envios="
					+ String.valueOf(id_compania_envios));
			sb.append(",id_producto=" + String.valueOf(id_producto));
			sb.append(",codigo_venta=" + String.valueOf(codigo_venta));
			sb.append(",cargo_envio=" + String.valueOf(cargo_envio));
			sb.append(",precio_venta=" + String.valueOf(precio_venta));
			sb.append(",cantidad=" + String.valueOf(cantidad));
			sb.append(",descuento=" + String.valueOf(descuento));
			sb.append(",subtotal_venta=" + String.valueOf(subtotal_venta));
			sb.append(",total_venta=" + String.valueOf(total_venta));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fact_ventasStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_venta, other.id_venta);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];

		public Integer IDPEDIDO;

		public Integer getIDPEDIDO() {
			return this.IDPEDIDO;
		}

		public String IDCLIENTE;

		public String getIDCLIENTE() {
			return this.IDCLIENTE;
		}

		public Integer IDEMPLEADO;

		public Integer getIDEMPLEADO() {
			return this.IDEMPLEADO;
		}

		public java.util.Date FECHAPEDIDO;

		public java.util.Date getFECHAPEDIDO() {
			return this.FECHAPEDIDO;
		}

		public java.util.Date FECHAENTREGA;

		public java.util.Date getFECHAENTREGA() {
			return this.FECHAENTREGA;
		}

		public java.util.Date FECHAENVIO;

		public java.util.Date getFECHAENVIO() {
			return this.FECHAENVIO;
		}

		public Integer FORMAENVIO;

		public Integer getFORMAENVIO() {
			return this.FORMAENVIO;
		}

		public Double CARGO;

		public Double getCARGO() {
			return this.CARGO;
		}

		public String DESTINATARIO;

		public String getDESTINATARIO() {
			return this.DESTINATARIO;
		}

		public String DIRECCIONDESTINATARIO;

		public String getDIRECCIONDESTINATARIO() {
			return this.DIRECCIONDESTINATARIO;
		}

		public String CIUDADDESTINATARIO;

		public String getCIUDADDESTINATARIO() {
			return this.CIUDADDESTINATARIO;
		}

		public String REGIONDESTINATARIO;

		public String getREGIONDESTINATARIO() {
			return this.REGIONDESTINATARIO;
		}

		public String CODPOSTALDESTINATARIO;

		public String getCODPOSTALDESTINATARIO() {
			return this.CODPOSTALDESTINATARIO;
		}

		public String PAISDESTINATARIO;

		public String getPAISDESTINATARIO() {
			return this.PAISDESTINATARIO;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Fact_Ventas.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Fact_Ventas.length == 0) {
						commonByteArray_SSDTPO_Fact_Ventas = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Fact_Ventas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Fact_Ventas, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Fact_Ventas, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.IDPEDIDO = readInteger(dis);

					this.IDCLIENTE = readString(dis);

					this.IDEMPLEADO = readInteger(dis);

					this.FECHAPEDIDO = readDate(dis);

					this.FECHAENTREGA = readDate(dis);

					this.FECHAENVIO = readDate(dis);

					this.FORMAENVIO = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CARGO = null;
					} else {
						this.CARGO = dis.readDouble();
					}

					this.DESTINATARIO = readString(dis);

					this.DIRECCIONDESTINATARIO = readString(dis);

					this.CIUDADDESTINATARIO = readString(dis);

					this.REGIONDESTINATARIO = readString(dis);

					this.CODPOSTALDESTINATARIO = readString(dis);

					this.PAISDESTINATARIO = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPEDIDO, dos);

				// String

				writeString(this.IDCLIENTE, dos);

				// Integer

				writeInteger(this.IDEMPLEADO, dos);

				// java.util.Date

				writeDate(this.FECHAPEDIDO, dos);

				// java.util.Date

				writeDate(this.FECHAENTREGA, dos);

				// java.util.Date

				writeDate(this.FECHAENVIO, dos);

				// Integer

				writeInteger(this.FORMAENVIO, dos);

				// Double

				if (this.CARGO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CARGO);
				}

				// String

				writeString(this.DESTINATARIO, dos);

				// String

				writeString(this.DIRECCIONDESTINATARIO, dos);

				// String

				writeString(this.CIUDADDESTINATARIO, dos);

				// String

				writeString(this.REGIONDESTINATARIO, dos);

				// String

				writeString(this.CODPOSTALDESTINATARIO, dos);

				// String

				writeString(this.PAISDESTINATARIO, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPEDIDO=" + String.valueOf(IDPEDIDO));
			sb.append(",IDCLIENTE=" + IDCLIENTE);
			sb.append(",IDEMPLEADO=" + String.valueOf(IDEMPLEADO));
			sb.append(",FECHAPEDIDO=" + String.valueOf(FECHAPEDIDO));
			sb.append(",FECHAENTREGA=" + String.valueOf(FECHAENTREGA));
			sb.append(",FECHAENVIO=" + String.valueOf(FECHAENVIO));
			sb.append(",FORMAENVIO=" + String.valueOf(FORMAENVIO));
			sb.append(",CARGO=" + String.valueOf(CARGO));
			sb.append(",DESTINATARIO=" + DESTINATARIO);
			sb.append(",DIRECCIONDESTINATARIO=" + DIRECCIONDESTINATARIO);
			sb.append(",CIUDADDESTINATARIO=" + CIUDADDESTINATARIO);
			sb.append(",REGIONDESTINATARIO=" + REGIONDESTINATARIO);
			sb.append(",CODPOSTALDESTINATARIO=" + CODPOSTALDESTINATARIO);
			sb.append(",PAISDESTINATARIO=" + PAISDESTINATARIO);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_7Struct implements
			routines.system.IPersistableRow<after_tDBInput_7Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IDPEDIDO;

		public Integer getIDPEDIDO() {
			return this.IDPEDIDO;
		}

		public String IDCLIENTE;

		public String getIDCLIENTE() {
			return this.IDCLIENTE;
		}

		public Integer IDEMPLEADO;

		public Integer getIDEMPLEADO() {
			return this.IDEMPLEADO;
		}

		public java.util.Date FECHAPEDIDO;

		public java.util.Date getFECHAPEDIDO() {
			return this.FECHAPEDIDO;
		}

		public java.util.Date FECHAENTREGA;

		public java.util.Date getFECHAENTREGA() {
			return this.FECHAENTREGA;
		}

		public java.util.Date FECHAENVIO;

		public java.util.Date getFECHAENVIO() {
			return this.FECHAENVIO;
		}

		public Integer FORMAENVIO;

		public Integer getFORMAENVIO() {
			return this.FORMAENVIO;
		}

		public Double CARGO;

		public Double getCARGO() {
			return this.CARGO;
		}

		public String DESTINATARIO;

		public String getDESTINATARIO() {
			return this.DESTINATARIO;
		}

		public String DIRECCIONDESTINATARIO;

		public String getDIRECCIONDESTINATARIO() {
			return this.DIRECCIONDESTINATARIO;
		}

		public String CIUDADDESTINATARIO;

		public String getCIUDADDESTINATARIO() {
			return this.CIUDADDESTINATARIO;
		}

		public String REGIONDESTINATARIO;

		public String getREGIONDESTINATARIO() {
			return this.REGIONDESTINATARIO;
		}

		public String CODPOSTALDESTINATARIO;

		public String getCODPOSTALDESTINATARIO() {
			return this.CODPOSTALDESTINATARIO;
		}

		public String PAISDESTINATARIO;

		public String getPAISDESTINATARIO() {
			return this.PAISDESTINATARIO;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDPEDIDO == null) ? 0 : this.IDPEDIDO
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_7Struct other = (after_tDBInput_7Struct) obj;

			if (this.IDPEDIDO == null) {
				if (other.IDPEDIDO != null)
					return false;

			} else if (!this.IDPEDIDO.equals(other.IDPEDIDO))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_7Struct other) {

			other.IDPEDIDO = this.IDPEDIDO;
			other.IDCLIENTE = this.IDCLIENTE;
			other.IDEMPLEADO = this.IDEMPLEADO;
			other.FECHAPEDIDO = this.FECHAPEDIDO;
			other.FECHAENTREGA = this.FECHAENTREGA;
			other.FECHAENVIO = this.FECHAENVIO;
			other.FORMAENVIO = this.FORMAENVIO;
			other.CARGO = this.CARGO;
			other.DESTINATARIO = this.DESTINATARIO;
			other.DIRECCIONDESTINATARIO = this.DIRECCIONDESTINATARIO;
			other.CIUDADDESTINATARIO = this.CIUDADDESTINATARIO;
			other.REGIONDESTINATARIO = this.REGIONDESTINATARIO;
			other.CODPOSTALDESTINATARIO = this.CODPOSTALDESTINATARIO;
			other.PAISDESTINATARIO = this.PAISDESTINATARIO;

		}

		public void copyKeysDataTo(after_tDBInput_7Struct other) {

			other.IDPEDIDO = this.IDPEDIDO;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Fact_Ventas.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Fact_Ventas.length == 0) {
						commonByteArray_SSDTPO_Fact_Ventas = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Fact_Ventas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Fact_Ventas, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Fact_Ventas, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.IDPEDIDO = readInteger(dis);

					this.IDCLIENTE = readString(dis);

					this.IDEMPLEADO = readInteger(dis);

					this.FECHAPEDIDO = readDate(dis);

					this.FECHAENTREGA = readDate(dis);

					this.FECHAENVIO = readDate(dis);

					this.FORMAENVIO = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CARGO = null;
					} else {
						this.CARGO = dis.readDouble();
					}

					this.DESTINATARIO = readString(dis);

					this.DIRECCIONDESTINATARIO = readString(dis);

					this.CIUDADDESTINATARIO = readString(dis);

					this.REGIONDESTINATARIO = readString(dis);

					this.CODPOSTALDESTINATARIO = readString(dis);

					this.PAISDESTINATARIO = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPEDIDO, dos);

				// String

				writeString(this.IDCLIENTE, dos);

				// Integer

				writeInteger(this.IDEMPLEADO, dos);

				// java.util.Date

				writeDate(this.FECHAPEDIDO, dos);

				// java.util.Date

				writeDate(this.FECHAENTREGA, dos);

				// java.util.Date

				writeDate(this.FECHAENVIO, dos);

				// Integer

				writeInteger(this.FORMAENVIO, dos);

				// Double

				if (this.CARGO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CARGO);
				}

				// String

				writeString(this.DESTINATARIO, dos);

				// String

				writeString(this.DIRECCIONDESTINATARIO, dos);

				// String

				writeString(this.CIUDADDESTINATARIO, dos);

				// String

				writeString(this.REGIONDESTINATARIO, dos);

				// String

				writeString(this.CODPOSTALDESTINATARIO, dos);

				// String

				writeString(this.PAISDESTINATARIO, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPEDIDO=" + String.valueOf(IDPEDIDO));
			sb.append(",IDCLIENTE=" + IDCLIENTE);
			sb.append(",IDEMPLEADO=" + String.valueOf(IDEMPLEADO));
			sb.append(",FECHAPEDIDO=" + String.valueOf(FECHAPEDIDO));
			sb.append(",FECHAENTREGA=" + String.valueOf(FECHAENTREGA));
			sb.append(",FECHAENVIO=" + String.valueOf(FECHAENVIO));
			sb.append(",FORMAENVIO=" + String.valueOf(FORMAENVIO));
			sb.append(",CARGO=" + String.valueOf(CARGO));
			sb.append(",DESTINATARIO=" + DESTINATARIO);
			sb.append(",DIRECCIONDESTINATARIO=" + DIRECCIONDESTINATARIO);
			sb.append(",CIUDADDESTINATARIO=" + CIUDADDESTINATARIO);
			sb.append(",REGIONDESTINATARIO=" + REGIONDESTINATARIO);
			sb.append(",CODPOSTALDESTINATARIO=" + CODPOSTALDESTINATARIO);
			sb.append(",PAISDESTINATARIO=" + PAISDESTINATARIO);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDPEDIDO, other.IDPEDIDO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_9Process(globalMap);
				tDBInput_11Process(globalMap);
				tDBInput_13Process(globalMap);
				tDBInput_15Process(globalMap);
				tDBInput_17Process(globalMap);
				tDBInput_19Process(globalMap);
				tDBInput_21Process(globalMap);
				tDBInput_23Process(globalMap);

				row1Struct row1 = new row1Struct();
				fact_ventasStruct fact_ventas = new fact_ventasStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_7",
						Boolean.FALSE);

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("fact_ventas"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				class BytesLimit65535_tDBOutput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_2().limitLog4jByte();

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "fact_ventas";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null
						|| dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				String insert_tDBOutput_2 = "INSERT INTO `"
						+ "fact_ventas"
						+ "` (`id_venta`,`id_cliente`,`id_empleado`,`id_fecha_pedido`,`id_fecha_entrega`,`id_fecha_envio`,`id_compania_envios`,`id_producto`,`codigo_venta`,`cargo_envio`,`precio_venta`,`cantidad`,`descuento`,`subtotal_venta`,`total_venta`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_7",
						Boolean.FALSE);

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				fact_ventasStruct fact_ventas_tmp = new fact_ventasStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_7",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				class BytesLimit65535_tDBInput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_7().limitLog4jByte();

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_7);

				String url_tDBInput_7 = "jdbc:ucanaccess://"
						+ "/Users/erikannunez/Documents/GitHub/ssd-tpo/TP_Integrador_BIDW/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_7 = "";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String atnParams_tDBInput_7 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_7 = atnParams_tDBInput_7.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_7 = new java.util.Properties();
				atnParamsPrope_tDBInput_7.put("user", dbUser_tDBInput_7);
				atnParamsPrope_tDBInput_7.put("password", dbPwd_tDBInput_7);
				atnParamsPrope_tDBInput_7
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_7.getBytes()));
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, atnParamsPrope_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "SELECT \n  PEDIDOS.IDPEDIDO, \n  PEDIDOS.IDCLIENTE, \n  PEDIDOS.IDEMPLEADO, \n  PEDIDOS.FECHAPEDIDO, \n  PEDIDOS.FECHAENTREG"
						+ "A, \n  PEDIDOS.[FECHAENVÍO], \n  PEDIDOS.[FORMAENVÍO], \n  PEDIDOS.CARGO, \n  PEDIDOS.DESTINATARIO, \n  PEDIDOS.[DIRECCIÓNDES"
						+ "TINATARIO], \n  PEDIDOS.CIUDADDESTINATARIO, \n  PEDIDOS.[REGIÓNDESTINATARIO], \n  PEDIDOS.[CÓDPOSTALDESTINATARIO], \n  PEDID"
						+ "OS.[PAÍSDESTINATARIO]\nFROM PEDIDOS";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row1.IDPEDIDO = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row1.IDPEDIDO = rs_tDBInput_7.getInt(1);
							} else {
								row1.IDPEDIDO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row1.IDCLIENTE = null;
						} else {

							row1.IDCLIENTE = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 2, false);
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row1.IDEMPLEADO = null;
						} else {

							if (rs_tDBInput_7.getObject(3) != null) {
								row1.IDEMPLEADO = rs_tDBInput_7.getInt(3);
							} else {
								row1.IDEMPLEADO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row1.FECHAPEDIDO = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_7 = rs_tDBInput_7
									.getTimestamp(4);
							if (timestamp_tDBInput_7 != null) {
								row1.FECHAPEDIDO = new java.util.Date(
										timestamp_tDBInput_7.getTime());
							} else {
								row1.FECHAPEDIDO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row1.FECHAENTREGA = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_7 = rs_tDBInput_7
									.getTimestamp(5);
							if (timestamp_tDBInput_7 != null) {
								row1.FECHAENTREGA = new java.util.Date(
										timestamp_tDBInput_7.getTime());
							} else {
								row1.FECHAENTREGA = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row1.FECHAENVIO = null;
						} else {

							java.sql.Timestamp timestamp_tDBInput_7 = rs_tDBInput_7
									.getTimestamp(6);
							if (timestamp_tDBInput_7 != null) {
								row1.FECHAENVIO = new java.util.Date(
										timestamp_tDBInput_7.getTime());
							} else {
								row1.FECHAENVIO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row1.FORMAENVIO = null;
						} else {

							if (rs_tDBInput_7.getObject(7) != null) {
								row1.FORMAENVIO = rs_tDBInput_7.getInt(7);
							} else {
								row1.FORMAENVIO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row1.CARGO = null;
						} else {

							if (rs_tDBInput_7.getObject(8) != null) {
								row1.CARGO = rs_tDBInput_7.getDouble(8);
							} else {
								row1.CARGO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row1.DESTINATARIO = null;
						} else {

							row1.DESTINATARIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 9, false);
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row1.DIRECCIONDESTINATARIO = null;
						} else {

							row1.DIRECCIONDESTINATARIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 10, false);
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row1.CIUDADDESTINATARIO = null;
						} else {

							row1.CIUDADDESTINATARIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 11, false);
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row1.REGIONDESTINATARIO = null;
						} else {

							row1.REGIONDESTINATARIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 12, false);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row1.CODPOSTALDESTINATARIO = null;
						} else {

							row1.CODPOSTALDESTINATARIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row1.PAISDESTINATARIO = null;
						} else {

							row1.PAISDESTINATARIO = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 14, false);
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						if (row1 != null) {
							globalMap.put(
									"ENABLE_TRACES_CONNECTION_tDBInput_7",
									Boolean.TRUE);
							if (runTrace.isPause()) {
								while (runTrace.isPause()) {
									Thread.sleep(100);
								}
							} else {

								// here we dump the line content for trace
								// purpose
								java.util.LinkedHashMap<String, String> runTraceData = new java.util.LinkedHashMap<String, String>();

								runTraceData.put("IDPEDIDO",
										String.valueOf(row1.IDPEDIDO));

								runTraceData.put("IDCLIENTE",
										String.valueOf(row1.IDCLIENTE));

								runTraceData.put("IDEMPLEADO",
										String.valueOf(row1.IDEMPLEADO));

								runTraceData.put("FECHAPEDIDO",
										String.valueOf(row1.FECHAPEDIDO));

								runTraceData.put("FECHAENTREGA",
										String.valueOf(row1.FECHAENTREGA));

								runTraceData.put("FECHAENVIO",
										String.valueOf(row1.FECHAENVIO));

								runTraceData.put("FORMAENVIO",
										String.valueOf(row1.FORMAENVIO));

								runTraceData.put("CARGO",
										String.valueOf(row1.CARGO));

								runTraceData.put("DESTINATARIO",
										String.valueOf(row1.DESTINATARIO));

								runTraceData
										.put("DIRECCIONDESTINATARIO",
												String.valueOf(row1.DIRECCIONDESTINATARIO));

								runTraceData
										.put("CIUDADDESTINATARIO",
												String.valueOf(row1.CIUDADDESTINATARIO));

								runTraceData
										.put("REGIONDESTINATARIO",
												String.valueOf(row1.REGIONDESTINATARIO));

								runTraceData
										.put("CODPOSTALDESTINATARIO",
												String.valueOf(row1.CODPOSTALDESTINATARIO));

								runTraceData.put("PAISDESTINATARIO",
										String.valueOf(row1.PAISDESTINATARIO));

								runTrace.sendTrace("row1", "tDBInput_7",
										runTraceData);
							}

						}

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.IDPEDIDO = row1.IDPEDIDO;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.IDPEDIDO = '"
							// + row2HashKey.IDPEDIDO + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.codigo_producto = row2.IDPRODUCTO;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.codigo_producto = '"
							// + row3HashKey.codigo_producto + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row4__id_compania_envios = row1.FORMAENVIO;
							if (exprKeyValue_row4__id_compania_envios == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row4HashKey.id_compania_envios = (int) (Integer) exprKeyValue_row4__id_compania_envios;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.id_compania_envios = '"
							// + row4HashKey.id_compania_envios + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.codigo_empleado = row1.IDEMPLEADO;

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.codigo_empleado = '"
							// + row5HashKey.codigo_empleado + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row6HashKey.codigo_cliente = row1.IDCLIENTE;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.codigo_cliente = '"
							// + row6HashKey.codigo_cliente + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row7"
						// /////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row7HashKey.fecha = row1.FECHAPEDIDO;

							row7HashKey.hashCodeDirty = true;

							tHash_Lookup_row7.lookup(row7HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.fecha = '"
							// + row7HashKey.fecha + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row8"
						// /////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row8HashKey.fecha = row1.FECHAENTREGA;

							row8HashKey.hashCodeDirty = true;

							tHash_Lookup_row8.lookup(row8HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.fecha = '"
							// + row8HashKey.fecha + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row9"
						// /////////////////////////////////////////////

						boolean forceLooprow9 = false;

						row9Struct row9ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row9HashKey.fecha = row1.FECHAENVIO;

							row9HashKey.hashCodeDirty = true;

							tHash_Lookup_row9.lookup(row9HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.fecha = '"
							// + row9HashKey.fecha + "'");
						} // G 071

						row9Struct row9 = null;

						row9Struct fromLookup_row9 = null;
						row9 = row9Default;

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.hasNext()) { // G 099

							fromLookup_row9 = tHash_Lookup_row9.next();

						} // G 099

						if (fromLookup_row9 != null) {
							row9 = fromLookup_row9;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							fact_ventas = null;

							// # Output table : 'fact_ventas'
							fact_ventas_tmp.id_venta = 0;
							fact_ventas_tmp.id_cliente = row6.id_cliente;
							fact_ventas_tmp.id_empleado = row5.id_empleado;
							fact_ventas_tmp.id_fecha_pedido = row7.id_tiempo;
							fact_ventas_tmp.id_fecha_entrega = row8.id_tiempo;
							fact_ventas_tmp.id_fecha_envio = row9.id_tiempo;
							fact_ventas_tmp.id_compania_envios = row4.id_compania_envios;
							fact_ventas_tmp.id_producto = row3.id_producto;
							fact_ventas_tmp.codigo_venta = row1.IDPEDIDO;
							fact_ventas_tmp.cargo_envio = row1.CARGO;
							fact_ventas_tmp.precio_venta = row2.PRECIOUNIDAD;
							fact_ventas_tmp.cantidad = row2.CANTIDAD;
							fact_ventas_tmp.descuento = row2.DESCUENTO;
							fact_ventas_tmp.subtotal_venta = row2.PRECIOUNIDAD
									* row2.CANTIDAD;
							fact_ventas_tmp.total_venta = (row2.PRECIOUNIDAD * row2.CANTIDAD)
									* (1 - row2.DESCUENTO);
							fact_ventas = fact_ventas_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						if (fact_ventas != null) {
							globalMap.put(
									"ENABLE_TRACES_CONNECTION_tDBInput_7",
									Boolean.TRUE);
							if (runTrace.isPause()) {
								while (runTrace.isPause()) {
									Thread.sleep(100);
								}
							} else {

								// here we dump the line content for trace
								// purpose
								java.util.LinkedHashMap<String, String> runTraceData = new java.util.LinkedHashMap<String, String>();

								runTraceData.put("id_venta",
										String.valueOf(fact_ventas.id_venta));

								runTraceData.put("id_cliente",
										String.valueOf(fact_ventas.id_cliente));

								runTraceData
										.put("id_empleado",
												String.valueOf(fact_ventas.id_empleado));

								runTraceData.put("id_fecha_pedido", String
										.valueOf(fact_ventas.id_fecha_pedido));

								runTraceData.put("id_fecha_entrega", String
										.valueOf(fact_ventas.id_fecha_entrega));

								runTraceData.put("id_fecha_envio", String
										.valueOf(fact_ventas.id_fecha_envio));

								runTraceData
										.put("id_compania_envios",
												String.valueOf(fact_ventas.id_compania_envios));

								runTraceData
										.put("id_producto",
												String.valueOf(fact_ventas.id_producto));

								runTraceData.put("codigo_venta", String
										.valueOf(fact_ventas.codigo_venta));

								runTraceData
										.put("cargo_envio",
												String.valueOf(fact_ventas.cargo_envio));

								runTraceData.put("precio_venta", String
										.valueOf(fact_ventas.precio_venta));

								runTraceData.put("cantidad",
										String.valueOf(fact_ventas.cantidad));

								runTraceData.put("descuento",
										String.valueOf(fact_ventas.descuento));

								runTraceData.put("subtotal_venta", String
										.valueOf(fact_ventas.subtotal_venta));

								runTraceData
										.put("total_venta",
												String.valueOf(fact_ventas.total_venta));

								runTrace.sendTrace("fact_ventas", "tDBInput_7",
										runTraceData);
							}

						}

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "fact_ventas"
						if (fact_ventas != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							// fact_ventas
							// fact_ventas

							if (execStat) {
								runStat.updateStatOnConnection("fact_ventas"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_2 = false;
							pstmt_tDBOutput_2.setInt(1, fact_ventas.id_venta);

							pstmt_tDBOutput_2.setInt(2, fact_ventas.id_cliente);

							pstmt_tDBOutput_2
									.setInt(3, fact_ventas.id_empleado);

							pstmt_tDBOutput_2.setInt(4,
									fact_ventas.id_fecha_pedido);

							pstmt_tDBOutput_2.setInt(5,
									fact_ventas.id_fecha_entrega);

							pstmt_tDBOutput_2.setInt(6,
									fact_ventas.id_fecha_envio);

							pstmt_tDBOutput_2.setInt(7,
									fact_ventas.id_compania_envios);

							pstmt_tDBOutput_2
									.setInt(8, fact_ventas.id_producto);

							if (fact_ventas.codigo_venta == null) {
								pstmt_tDBOutput_2.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setInt(9,
										fact_ventas.codigo_venta);
							}

							if (fact_ventas.cargo_envio == null) {
								pstmt_tDBOutput_2.setNull(10,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(10,
										fact_ventas.cargo_envio);
							}

							if (fact_ventas.precio_venta == null) {
								pstmt_tDBOutput_2.setNull(11,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(11,
										fact_ventas.precio_venta);
							}

							if (fact_ventas.cantidad == null) {
								pstmt_tDBOutput_2.setNull(12,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setInt(12,
										fact_ventas.cantidad);
							}

							if (fact_ventas.descuento == null) {
								pstmt_tDBOutput_2.setNull(13,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(13,
										fact_ventas.descuento);
							}

							if (fact_ventas.subtotal_venta == null) {
								pstmt_tDBOutput_2.setNull(14,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(14,
										fact_ventas.subtotal_venta);
							}

							if (fact_ventas.total_venta == null) {
								pstmt_tDBOutput_2.setNull(15,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_2.setDouble(15,
										fact_ventas.total_venta);
							}

							pstmt_tDBOutput_2.addBatch();
							nb_line_tDBOutput_2++;

							batchSizeCounter_tDBOutput_2++;
							if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
								try {
									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}
									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_2 = 0;
							}
							commitCounter_tDBOutput_2++;

							if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

								try {
									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}
									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_2.commit();
								commitCounter_tDBOutput_2 = 0;

							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "fact_ventas"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						if (!isChildJob
								&& (Boolean) globalMap
										.get("ENABLE_TRACES_CONNECTION_tDBInput_7")) {
							if (globalMap.get("USE_CONDITION") != null
									&& (Boolean) globalMap.get("USE_CONDITION")) {
								if (globalMap.get("TRACE_CONDITION") != null
										&& (Boolean) globalMap
												.get("TRACE_CONDITION")) {
									// if next breakpoint has been clicked on UI
									// or if start job, should wait action of
									// user.
									if (runTrace.isNextBreakpoint()) {
										runTrace.waitForUserAction();
									} else if (runTrace.isNextRow()) {
										runTrace.waitForUserAction();
									}
								} else {
									// if next row has been clicked on UI or if
									// start job, should wait action of user.
									if (runTrace.isNextRow()) {
										runTrace.waitForUserAction();
									}
								}
							} else { // no condition set
								if (runTrace.isNextRow()) {
									runTrace.waitForUserAction();
								} else {
									Thread.sleep(1000);
								}
							}

						}
						globalMap.put("USE_CONDITION", Boolean.FALSE);

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					stmt_tDBInput_7.close();

					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();

				}

				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("fact_ventas"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row9");

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("finish_tDBOutput_2") == null) {
					if (resourceMap.get("conn_tDBOutput_2") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_2");

							ctn_tDBOutput_2.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
							String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
									+ sqlEx_tDBOutput_2.getMessage();

							System.err.println(errorMessage_tDBOutput_2);
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IDPEDIDO;

		public Integer getIDPEDIDO() {
			return this.IDPEDIDO;
		}

		public int IDPRODUCTO;

		public int getIDPRODUCTO() {
			return this.IDPRODUCTO;
		}

		public double PRECIOUNIDAD;

		public double getPRECIOUNIDAD() {
			return this.PRECIOUNIDAD;
		}

		public int CANTIDAD;

		public int getCANTIDAD() {
			return this.CANTIDAD;
		}

		public double DESCUENTO;

		public double getDESCUENTO() {
			return this.DESCUENTO;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDPEDIDO == null) ? 0 : this.IDPEDIDO
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.IDPEDIDO == null) {
				if (other.IDPEDIDO != null)
					return false;

			} else if (!this.IDPEDIDO.equals(other.IDPEDIDO))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.IDPEDIDO = this.IDPEDIDO;
			other.IDPRODUCTO = this.IDPRODUCTO;
			other.PRECIOUNIDAD = this.PRECIOUNIDAD;
			other.CANTIDAD = this.CANTIDAD;
			other.DESCUENTO = this.DESCUENTO;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.IDPEDIDO = this.IDPEDIDO;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.IDPEDIDO = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPEDIDO, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.IDPRODUCTO = dis.readInt();

				this.PRECIOUNIDAD = dis.readDouble();

				this.CANTIDAD = dis.readInt();

				this.DESCUENTO = dis.readDouble();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.IDPRODUCTO);

				dos.writeDouble(this.PRECIOUNIDAD);

				dos.writeInt(this.CANTIDAD);

				dos.writeDouble(this.DESCUENTO);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPEDIDO=" + String.valueOf(IDPEDIDO));
			sb.append(",IDPRODUCTO=" + String.valueOf(IDPRODUCTO));
			sb.append(",PRECIOUNIDAD=" + String.valueOf(PRECIOUNIDAD));
			sb.append(",CANTIDAD=" + String.valueOf(CANTIDAD));
			sb.append(",DESCUENTO=" + String.valueOf(DESCUENTO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDPEDIDO, other.IDPEDIDO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_9",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				class BytesLimit65535_tAdvancedHash_row2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row2().limitLog4jByte();

				// connection name:row2
				// source node:tDBInput_9 - inputs:(after_tDBInput_7)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_9",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				class BytesLimit65535_tDBInput_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_9().limitLog4jByte();

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_9);

				String url_tDBInput_9 = "jdbc:ucanaccess://"
						+ "/Users/erikannunez/Documents/GitHub/ssd-tpo/TP_Integrador_BIDW/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_9 = "";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String atnParams_tDBInput_9 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_9 = atnParams_tDBInput_9.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_9 = new java.util.Properties();
				atnParamsPrope_tDBInput_9.put("user", dbUser_tDBInput_9);
				atnParamsPrope_tDBInput_9.put("password", dbPwd_tDBInput_9);
				atnParamsPrope_tDBInput_9
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_9.getBytes()));
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(
						url_tDBInput_9, atnParamsPrope_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9
						.createStatement();

				String dbquery_tDBInput_9 = "SELECT \n  [DETALLES DE PEDIDOS].IDPEDIDO, \n  [DETALLES DE PEDIDOS].IDPRODUCTO, \n  [DETALLES DE PEDIDOS].PRECIOUNIDAD, \n"
						+ "  [DETALLES DE PEDIDOS].CANTIDAD, \n  [DETALLES DE PEDIDOS].DESCUENTO\nFROM [DETALLES DE PEDIDOS]";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9
							.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9
							.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9
							.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row2.IDPEDIDO = null;
						} else {

							if (rs_tDBInput_9.getObject(1) != null) {
								row2.IDPEDIDO = rs_tDBInput_9.getInt(1);
							} else {
								row2.IDPEDIDO = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row2.IDPRODUCTO = 0;
						} else {

							if (rs_tDBInput_9.getObject(2) != null) {
								row2.IDPRODUCTO = rs_tDBInput_9.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row2.PRECIOUNIDAD = 0;
						} else {

							if (rs_tDBInput_9.getObject(3) != null) {
								row2.PRECIOUNIDAD = rs_tDBInput_9.getDouble(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row2.CANTIDAD = 0;
						} else {

							if (rs_tDBInput_9.getObject(4) != null) {
								row2.CANTIDAD = rs_tDBInput_9.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row2.DESCUENTO = 0;
						} else {

							if (rs_tDBInput_9.getObject(5) != null) {
								row2.DESCUENTO = rs_tDBInput_9.getDouble(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.IDPEDIDO = row2.IDPEDIDO;

						row2_HashRow.IDPRODUCTO = row2.IDPRODUCTO;

						row2_HashRow.PRECIOUNIDAD = row2.PRECIOUNIDAD;

						row2_HashRow.CANTIDAD = row2.CANTIDAD;

						row2_HashRow.DESCUENTO = row2.DESCUENTO;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					stmt_tDBInput_9.close();

					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_producto;

		public int getId_producto() {
			return this.id_producto;
		}

		public int id_proveedor;

		public int getId_proveedor() {
			return this.id_proveedor;
		}

		public int id_categoria;

		public int getId_categoria() {
			return this.id_categoria;
		}

		public Integer codigo_producto;

		public Integer getCodigo_producto() {
			return this.codigo_producto;
		}

		public String nombre_producto;

		public String getNombre_producto() {
			return this.nombre_producto;
		}

		public String cantidad_por_unidad;

		public String getCantidad_por_unidad() {
			return this.cantidad_por_unidad;
		}

		public Double precio_por_unidad;

		public Double getPrecio_por_unidad() {
			return this.precio_por_unidad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_producto == null) ? 0
								: this.codigo_producto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.codigo_producto == null) {
				if (other.codigo_producto != null)
					return false;

			} else if (!this.codigo_producto.equals(other.codigo_producto))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id_producto = this.id_producto;
			other.id_proveedor = this.id_proveedor;
			other.id_categoria = this.id_categoria;
			other.codigo_producto = this.codigo_producto;
			other.nombre_producto = this.nombre_producto;
			other.cantidad_por_unidad = this.cantidad_por_unidad;
			other.precio_por_unidad = this.precio_por_unidad;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.codigo_producto = this.codigo_producto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.codigo_producto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.codigo_producto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_producto = dis.readInt();

				this.id_proveedor = dis.readInt();

				this.id_categoria = dis.readInt();

				this.nombre_producto = readString(dis, ois);

				this.cantidad_por_unidad = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.precio_por_unidad = null;
				} else {
					this.precio_por_unidad = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_producto);

				dos.writeInt(this.id_proveedor);

				dos.writeInt(this.id_categoria);

				writeString(this.nombre_producto, dos, oos);

				writeString(this.cantidad_por_unidad, dos, oos);

				if (this.precio_por_unidad == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.precio_por_unidad);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_producto=" + String.valueOf(id_producto));
			sb.append(",id_proveedor=" + String.valueOf(id_proveedor));
			sb.append(",id_categoria=" + String.valueOf(id_categoria));
			sb.append(",codigo_producto=" + String.valueOf(codigo_producto));
			sb.append(",nombre_producto=" + nombre_producto);
			sb.append(",cantidad_por_unidad=" + cantidad_por_unidad);
			sb.append(",precio_por_unidad=" + String.valueOf(precio_por_unidad));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_producto,
					other.codigo_producto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_11",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				class BytesLimit65535_tAdvancedHash_row3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row3().limitLog4jByte();

				// connection name:row3
				// source node:tDBInput_11 - inputs:(after_tDBInput_7)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_11",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				class BytesLimit65535_tDBInput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_11().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_11 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_11 = calendar_tDBInput_11
						.getTime();
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = "root";

				final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String url_tDBInput_11 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_11 = java.sql.DriverManager.getConnection(
						url_tDBInput_11, dbUser_tDBInput_11, dbPwd_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11
						.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  `dim_producto`.`id_producto`, \n  `dim_producto`.`id_proveedor`, \n  `dim_producto`.`id_categoria`, \n  `dim_pro"
						+ "ducto`.`codigo_producto`, \n  `dim_producto`.`nombre_producto`, \n  `dim_producto`.`cantidad_por_unidad`, \n  `dim_producto"
						+ "`.`precio_por_unidad`\nFROM `dim_producto`";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11
							.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11
							.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11
							.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row3.id_producto = 0;
						} else {

							if (rs_tDBInput_11.getObject(1) != null) {
								row3.id_producto = rs_tDBInput_11.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row3.id_proveedor = 0;
						} else {

							if (rs_tDBInput_11.getObject(2) != null) {
								row3.id_proveedor = rs_tDBInput_11.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							row3.id_categoria = 0;
						} else {

							if (rs_tDBInput_11.getObject(3) != null) {
								row3.id_categoria = rs_tDBInput_11.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 4) {
							row3.codigo_producto = null;
						} else {

							if (rs_tDBInput_11.getObject(4) != null) {
								row3.codigo_producto = rs_tDBInput_11.getInt(4);
							} else {
								row3.codigo_producto = null;
							}
						}
						if (colQtyInRs_tDBInput_11 < 5) {
							row3.nombre_producto = null;
						} else {

							row3.nombre_producto = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 5, false);
						}
						if (colQtyInRs_tDBInput_11 < 6) {
							row3.cantidad_por_unidad = null;
						} else {

							row3.cantidad_por_unidad = routines.system.JDBCUtil
									.getString(rs_tDBInput_11, 6, false);
						}
						if (colQtyInRs_tDBInput_11 < 7) {
							row3.precio_por_unidad = null;
						} else {

							if (rs_tDBInput_11.getObject(7) != null) {
								row3.precio_por_unidad = rs_tDBInput_11
										.getDouble(7);
							} else {
								row3.precio_por_unidad = null;
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.id_producto = row3.id_producto;

						row3_HashRow.id_proveedor = row3.id_proveedor;

						row3_HashRow.id_categoria = row3.id_categoria;

						row3_HashRow.codigo_producto = row3.codigo_producto;

						row3_HashRow.nombre_producto = row3.nombre_producto;

						row3_HashRow.cantidad_por_unidad = row3.cantidad_por_unidad;

						row3_HashRow.precio_por_unidad = row3.precio_por_unidad;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					stmt_tDBInput_11.close();
					if (conn_tDBInput_11 != null
							&& !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

					}

				}

				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_compania_envios;

		public int getId_compania_envios() {
			return this.id_compania_envios;
		}

		public String nombre_compania_envios;

		public String getNombre_compania_envios() {
			return this.nombre_compania_envios;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_compania_envios;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id_compania_envios != other.id_compania_envios)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_compania_envios = this.id_compania_envios;
			other.nombre_compania_envios = this.nombre_compania_envios;
			other.telefono = this.telefono;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id_compania_envios = this.id_compania_envios;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.id_compania_envios = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_compania_envios);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nombre_compania_envios = readString(dis, ois);

				this.telefono = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nombre_compania_envios, dos, oos);

				writeString(this.telefono, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_compania_envios="
					+ String.valueOf(id_compania_envios));
			sb.append(",nombre_compania_envios=" + nombre_compania_envios);
			sb.append(",telefono=" + telefono);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_compania_envios,
					other.id_compania_envios);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_13",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tDBInput_13 - inputs:(after_tDBInput_7)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_13",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				class BytesLimit65535_tDBInput_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_13().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_13 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_13.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_13 = calendar_tDBInput_13
						.getTime();
				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = "root";

				final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String url_tDBInput_13 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(
						url_tDBInput_13, dbUser_tDBInput_13, dbPwd_tDBInput_13);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13
						.createStatement();

				String dbquery_tDBInput_13 = "SELECT \n  `dim_companiaEnvios`.`id_compania_envios`, \n  `dim_companiaEnvios`.`nombre_compania_envios`, \n  `dim_compania"
						+ "Envios`.`telefono`\nFROM `dim_companiaEnvios`";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13
							.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13
							.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13
							.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row4.id_compania_envios = 0;
						} else {

							if (rs_tDBInput_13.getObject(1) != null) {
								row4.id_compania_envios = rs_tDBInput_13
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row4.nombre_compania_envios = null;
						} else {

							row4.nombre_compania_envios = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 2, false);
						}
						if (colQtyInRs_tDBInput_13 < 3) {
							row4.telefono = null;
						} else {

							row4.telefono = routines.system.JDBCUtil.getString(
									rs_tDBInput_13, 3, false);
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.id_compania_envios = row4.id_compania_envios;

						row4_HashRow.nombre_compania_envios = row4.nombre_compania_envios;

						row4_HashRow.telefono = row4.telefono;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					stmt_tDBInput_13.close();
					if (conn_tDBInput_13 != null
							&& !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

					}

				}

				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_empleado;

		public int getId_empleado() {
			return this.id_empleado;
		}

		public int id_cargo;

		public int getId_cargo() {
			return this.id_cargo;
		}

		public int id_tratamiento;

		public int getId_tratamiento() {
			return this.id_tratamiento;
		}

		public int id_ciudad;

		public int getId_ciudad() {
			return this.id_ciudad;
		}

		public Integer codigo_empleado;

		public Integer getCodigo_empleado() {
			return this.codigo_empleado;
		}

		public String apellido;

		public String getApellido() {
			return this.apellido;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String fecha_contratacion;

		public String getFecha_contratacion() {
			return this.fecha_contratacion;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String codigo_postal;

		public String getCodigo_postal() {
			return this.codigo_postal;
		}

		public String telefono_domicilio;

		public String getTelefono_domicilio() {
			return this.telefono_domicilio;
		}

		public String extension;

		public String getExtension() {
			return this.extension;
		}

		public Object foto;

		public Object getFoto() {
			return this.foto;
		}

		public String nota;

		public String getNota() {
			return this.nota;
		}

		public String jefe;

		public String getJefe() {
			return this.jefe;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_empleado == null) ? 0
								: this.codigo_empleado.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.codigo_empleado == null) {
				if (other.codigo_empleado != null)
					return false;

			} else if (!this.codigo_empleado.equals(other.codigo_empleado))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id_empleado = this.id_empleado;
			other.id_cargo = this.id_cargo;
			other.id_tratamiento = this.id_tratamiento;
			other.id_ciudad = this.id_ciudad;
			other.codigo_empleado = this.codigo_empleado;
			other.apellido = this.apellido;
			other.nombre = this.nombre;
			other.fecha_nacimiento = this.fecha_nacimiento;
			other.fecha_contratacion = this.fecha_contratacion;
			other.direccion = this.direccion;
			other.codigo_postal = this.codigo_postal;
			other.telefono_domicilio = this.telefono_domicilio;
			other.extension = this.extension;
			other.foto = this.foto;
			other.nota = this.nota;
			other.jefe = this.jefe;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.codigo_empleado = this.codigo_empleado;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.codigo_empleado = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.codigo_empleado, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_empleado = dis.readInt();

				this.id_cargo = dis.readInt();

				this.id_tratamiento = dis.readInt();

				this.id_ciudad = dis.readInt();

				this.apellido = readString(dis, ois);

				this.nombre = readString(dis, ois);

				this.fecha_nacimiento = readString(dis, ois);

				this.fecha_contratacion = readString(dis, ois);

				this.direccion = readString(dis, ois);

				this.codigo_postal = readString(dis, ois);

				this.telefono_domicilio = readString(dis, ois);

				this.extension = readString(dis, ois);

				this.foto = (Object) ois.readObject();

				this.nota = readString(dis, ois);

				this.jefe = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_empleado);

				dos.writeInt(this.id_cargo);

				dos.writeInt(this.id_tratamiento);

				dos.writeInt(this.id_ciudad);

				writeString(this.apellido, dos, oos);

				writeString(this.nombre, dos, oos);

				writeString(this.fecha_nacimiento, dos, oos);

				writeString(this.fecha_contratacion, dos, oos);

				writeString(this.direccion, dos, oos);

				writeString(this.codigo_postal, dos, oos);

				writeString(this.telefono_domicilio, dos, oos);

				writeString(this.extension, dos, oos);

				oos.writeObject(this.foto);

				writeString(this.nota, dos, oos);

				writeString(this.jefe, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_empleado=" + String.valueOf(id_empleado));
			sb.append(",id_cargo=" + String.valueOf(id_cargo));
			sb.append(",id_tratamiento=" + String.valueOf(id_tratamiento));
			sb.append(",id_ciudad=" + String.valueOf(id_ciudad));
			sb.append(",codigo_empleado=" + String.valueOf(codigo_empleado));
			sb.append(",apellido=" + apellido);
			sb.append(",nombre=" + nombre);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",fecha_contratacion=" + fecha_contratacion);
			sb.append(",direccion=" + direccion);
			sb.append(",codigo_postal=" + codigo_postal);
			sb.append(",telefono_domicilio=" + telefono_domicilio);
			sb.append(",extension=" + extension);
			sb.append(",foto=" + String.valueOf(foto));
			sb.append(",nota=" + nota);
			sb.append(",jefe=" + jefe);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_empleado,
					other.codigo_empleado);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_15",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				class BytesLimit65535_tAdvancedHash_row5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row5().limitLog4jByte();

				// connection name:row5
				// source node:tDBInput_15 - inputs:(after_tDBInput_7)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 -
				// inputs:(row5) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_15",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				class BytesLimit65535_tDBInput_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_15().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_15 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_15.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_15 = calendar_tDBInput_15
						.getTime();
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "root";

				final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String url_tDBInput_15 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(
						url_tDBInput_15, dbUser_tDBInput_15, dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15
						.createStatement();

				String dbquery_tDBInput_15 = "SELECT \n  `dim_empleado`.`id_empleado`, \n  `dim_empleado`.`id_cargo`, \n  `dim_empleado`.`id_tratamiento`, \n  `dim_emple"
						+ "ado`.`id_ciudad`, \n  `dim_empleado`.`codigo_empleado`, \n  `dim_empleado`.`apellido`, \n  `dim_empleado`.`nombre`, \n  `dim"
						+ "_empleado`.`fecha_nacimiento`, \n  `dim_empleado`.`fecha_contratacion`, \n  `dim_empleado`.`direccion`, \n  `dim_empleado`."
						+ "`codigo_postal`, \n  `dim_empleado`.`telefono_domicilio`, \n  `dim_empleado`.`extension`, \n  `dim_empleado`.`foto`, \n  `di"
						+ "m_empleado`.`nota`, \n  `dim_empleado`.`jefe`\nFROM `dim_empleado`";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15
							.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15
							.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15
							.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row5.id_empleado = 0;
						} else {

							if (rs_tDBInput_15.getObject(1) != null) {
								row5.id_empleado = rs_tDBInput_15.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row5.id_cargo = 0;
						} else {

							if (rs_tDBInput_15.getObject(2) != null) {
								row5.id_cargo = rs_tDBInput_15.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row5.id_tratamiento = 0;
						} else {

							if (rs_tDBInput_15.getObject(3) != null) {
								row5.id_tratamiento = rs_tDBInput_15.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row5.id_ciudad = 0;
						} else {

							if (rs_tDBInput_15.getObject(4) != null) {
								row5.id_ciudad = rs_tDBInput_15.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 5) {
							row5.codigo_empleado = null;
						} else {

							if (rs_tDBInput_15.getObject(5) != null) {
								row5.codigo_empleado = rs_tDBInput_15.getInt(5);
							} else {
								row5.codigo_empleado = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 6) {
							row5.apellido = null;
						} else {

							row5.apellido = routines.system.JDBCUtil.getString(
									rs_tDBInput_15, 6, false);
						}
						if (colQtyInRs_tDBInput_15 < 7) {
							row5.nombre = null;
						} else {

							row5.nombre = routines.system.JDBCUtil.getString(
									rs_tDBInput_15, 7, false);
						}
						if (colQtyInRs_tDBInput_15 < 8) {
							row5.fecha_nacimiento = null;
						} else {

							row5.fecha_nacimiento = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 8, false);
						}
						if (colQtyInRs_tDBInput_15 < 9) {
							row5.fecha_contratacion = null;
						} else {

							row5.fecha_contratacion = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 9, false);
						}
						if (colQtyInRs_tDBInput_15 < 10) {
							row5.direccion = null;
						} else {

							row5.direccion = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 10, false);
						}
						if (colQtyInRs_tDBInput_15 < 11) {
							row5.codigo_postal = null;
						} else {

							row5.codigo_postal = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 11, false);
						}
						if (colQtyInRs_tDBInput_15 < 12) {
							row5.telefono_domicilio = null;
						} else {

							row5.telefono_domicilio = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 12, false);
						}
						if (colQtyInRs_tDBInput_15 < 13) {
							row5.extension = null;
						} else {

							row5.extension = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 13, false);
						}
						if (colQtyInRs_tDBInput_15 < 14) {
							row5.foto = null;
						} else {

							if (rs_tDBInput_15.getObject(14) != null) {
								row5.foto = rs_tDBInput_15.getObject(14);
							} else {
								row5.foto = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 15) {
							row5.nota = null;
						} else {

							row5.nota = routines.system.JDBCUtil.getString(
									rs_tDBInput_15, 15, false);
						}
						if (colQtyInRs_tDBInput_15 < 16) {
							row5.jefe = null;
						} else {

							row5.jefe = routines.system.JDBCUtil.getString(
									rs_tDBInput_15, 16, false);
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.id_empleado = row5.id_empleado;

						row5_HashRow.id_cargo = row5.id_cargo;

						row5_HashRow.id_tratamiento = row5.id_tratamiento;

						row5_HashRow.id_ciudad = row5.id_ciudad;

						row5_HashRow.codigo_empleado = row5.codigo_empleado;

						row5_HashRow.apellido = row5.apellido;

						row5_HashRow.nombre = row5.nombre;

						row5_HashRow.fecha_nacimiento = row5.fecha_nacimiento;

						row5_HashRow.fecha_contratacion = row5.fecha_contratacion;

						row5_HashRow.direccion = row5.direccion;

						row5_HashRow.codigo_postal = row5.codigo_postal;

						row5_HashRow.telefono_domicilio = row5.telefono_domicilio;

						row5_HashRow.extension = row5.extension;

						row5_HashRow.foto = row5.foto;

						row5_HashRow.nota = row5.nota;

						row5_HashRow.jefe = row5.jefe;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					stmt_tDBInput_15.close();
					if (conn_tDBInput_15 != null
							&& !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

					}

				}

				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_cliente;

		public int getId_cliente() {
			return this.id_cliente;
		}

		public int id_ciudad_cliente;

		public int getId_ciudad_cliente() {
			return this.id_ciudad_cliente;
		}

		public String codigo_cliente;

		public String getCodigo_cliente() {
			return this.codigo_cliente;
		}

		public String nombre_cliente;

		public String getNombre_cliente() {
			return this.nombre_cliente;
		}

		public String nombre_contacto;

		public String getNombre_contacto() {
			return this.nombre_contacto;
		}

		public String cargo_contacto;

		public String getCargo_contacto() {
			return this.cargo_contacto;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String codigo_postal;

		public String getCodigo_postal() {
			return this.codigo_postal;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_cliente == null) ? 0
								: this.codigo_cliente.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.codigo_cliente == null) {
				if (other.codigo_cliente != null)
					return false;

			} else if (!this.codigo_cliente.equals(other.codigo_cliente))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_cliente = this.id_cliente;
			other.id_ciudad_cliente = this.id_ciudad_cliente;
			other.codigo_cliente = this.codigo_cliente;
			other.nombre_cliente = this.nombre_cliente;
			other.nombre_contacto = this.nombre_contacto;
			other.cargo_contacto = this.cargo_contacto;
			other.telefono = this.telefono;
			other.fax = this.fax;
			other.direccion = this.direccion;
			other.codigo_postal = this.codigo_postal;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.codigo_cliente = this.codigo_cliente;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Fact_Ventas.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Fact_Ventas.length == 0) {
						commonByteArray_SSDTPO_Fact_Ventas = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Fact_Ventas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Fact_Ventas, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Fact_Ventas, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.codigo_cliente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_cliente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_cliente = dis.readInt();

				this.id_ciudad_cliente = dis.readInt();

				this.nombre_cliente = readString(dis, ois);

				this.nombre_contacto = readString(dis, ois);

				this.cargo_contacto = readString(dis, ois);

				this.telefono = readString(dis, ois);

				this.fax = readString(dis, ois);

				this.direccion = readString(dis, ois);

				this.codigo_postal = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_cliente);

				dos.writeInt(this.id_ciudad_cliente);

				writeString(this.nombre_cliente, dos, oos);

				writeString(this.nombre_contacto, dos, oos);

				writeString(this.cargo_contacto, dos, oos);

				writeString(this.telefono, dos, oos);

				writeString(this.fax, dos, oos);

				writeString(this.direccion, dos, oos);

				writeString(this.codigo_postal, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_cliente=" + String.valueOf(id_cliente));
			sb.append(",id_ciudad_cliente=" + String.valueOf(id_ciudad_cliente));
			sb.append(",codigo_cliente=" + codigo_cliente);
			sb.append(",nombre_cliente=" + nombre_cliente);
			sb.append(",nombre_contacto=" + nombre_contacto);
			sb.append(",cargo_contacto=" + cargo_contacto);
			sb.append(",telefono=" + telefono);
			sb.append(",fax=" + fax);
			sb.append(",direccion=" + direccion);
			sb.append(",codigo_postal=" + codigo_postal);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_cliente,
					other.codigo_cliente);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_17",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				class BytesLimit65535_tAdvancedHash_row6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row6().limitLog4jByte();

				// connection name:row6
				// source node:tDBInput_17 - inputs:(after_tDBInput_7)
				// outputs:(row6,row6) | target node:tAdvancedHash_row6 -
				// inputs:(row6) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_17",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				class BytesLimit65535_tDBInput_17 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_17().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_17 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_17.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_17 = calendar_tDBInput_17
						.getTime();
				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "root";

				final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;

				String url_tDBInput_17 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_17 = java.sql.DriverManager.getConnection(
						url_tDBInput_17, dbUser_tDBInput_17, dbPwd_tDBInput_17);

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17
						.createStatement();

				String dbquery_tDBInput_17 = "SELECT \n  `dim_cliente`.`id_cliente`, \n  `dim_cliente`.`id_ciudad_cliente`, \n  `dim_cliente`.`codigo_cliente`, \n  `dim_"
						+ "cliente`.`nombre_cliente`, \n  `dim_cliente`.`nombre_contacto`, \n  `dim_cliente`.`cargo_contacto`, \n  `dim_cliente`.`tele"
						+ "fono`, \n  `dim_cliente`.`fax`, \n  `dim_cliente`.`direccion`, \n  `dim_cliente`.`codigo_postal`\nFROM `dim_cliente`";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17
							.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17
							.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17
							.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row6.id_cliente = 0;
						} else {

							if (rs_tDBInput_17.getObject(1) != null) {
								row6.id_cliente = rs_tDBInput_17.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row6.id_ciudad_cliente = 0;
						} else {

							if (rs_tDBInput_17.getObject(2) != null) {
								row6.id_ciudad_cliente = rs_tDBInput_17
										.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row6.codigo_cliente = null;
						} else {

							row6.codigo_cliente = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 3, false);
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row6.nombre_cliente = null;
						} else {

							row6.nombre_cliente = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 4, false);
						}
						if (colQtyInRs_tDBInput_17 < 5) {
							row6.nombre_contacto = null;
						} else {

							row6.nombre_contacto = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 5, false);
						}
						if (colQtyInRs_tDBInput_17 < 6) {
							row6.cargo_contacto = null;
						} else {

							row6.cargo_contacto = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 6, false);
						}
						if (colQtyInRs_tDBInput_17 < 7) {
							row6.telefono = null;
						} else {

							row6.telefono = routines.system.JDBCUtil.getString(
									rs_tDBInput_17, 7, false);
						}
						if (colQtyInRs_tDBInput_17 < 8) {
							row6.fax = null;
						} else {

							row6.fax = routines.system.JDBCUtil.getString(
									rs_tDBInput_17, 8, false);
						}
						if (colQtyInRs_tDBInput_17 < 9) {
							row6.direccion = null;
						} else {

							row6.direccion = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 9, false);
						}
						if (colQtyInRs_tDBInput_17 < 10) {
							row6.codigo_postal = null;
						} else {

							row6.codigo_postal = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 10, false);
						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.id_cliente = row6.id_cliente;

						row6_HashRow.id_ciudad_cliente = row6.id_ciudad_cliente;

						row6_HashRow.codigo_cliente = row6.codigo_cliente;

						row6_HashRow.nombre_cliente = row6.nombre_cliente;

						row6_HashRow.nombre_contacto = row6.nombre_contacto;

						row6_HashRow.cargo_contacto = row6.cargo_contacto;

						row6_HashRow.telefono = row6.telefono;

						row6_HashRow.fax = row6.fax;

						row6_HashRow.direccion = row6.direccion;

						row6_HashRow.codigo_postal = row6.codigo_postal;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					stmt_tDBInput_17.close();
					if (conn_tDBInput_17 != null
							&& !conn_tDBInput_17.isClosed()) {

						conn_tDBInput_17.close();

					}

				}

				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_tiempo;

		public int getId_tiempo() {
			return this.id_tiempo;
		}

		public int id_dia;

		public int getId_dia() {
			return this.id_dia;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public String dow;

		public String getDow() {
			return this.dow;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.fecha == null) ? 0 : this.fecha.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.fecha == null) {
				if (other.fecha != null)
					return false;

			} else if (!this.fecha.equals(other.fecha))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.id_tiempo = this.id_tiempo;
			other.id_dia = this.id_dia;
			other.fecha = this.fecha;
			other.dow = this.dow;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.fecha = this.fecha;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.fecha = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_tiempo = dis.readInt();

				this.id_dia = dis.readInt();

				this.dow = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_tiempo);

				dos.writeInt(this.id_dia);

				writeString(this.dow, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tiempo=" + String.valueOf(id_tiempo));
			sb.append(",id_dia=" + String.valueOf(id_dia));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",dow=" + dow);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fecha, other.fecha);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_19Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_19",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row7 = 0;

				class BytesLimit65535_tAdvancedHash_row7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row7().limitLog4jByte();

				// connection name:row7
				// source node:tDBInput_19 - inputs:(after_tDBInput_7)
				// outputs:(row7,row7) | target node:tAdvancedHash_row7 -
				// inputs:(row7) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBInput_19 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_19",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_19", false);
				start_Hash.put("tDBInput_19", System.currentTimeMillis());

				currentComponent = "tDBInput_19";

				int tos_count_tDBInput_19 = 0;

				class BytesLimit65535_tDBInput_19 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_19().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_19 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_19.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_19 = calendar_tDBInput_19
						.getTime();
				int nb_line_tDBInput_19 = 0;
				java.sql.Connection conn_tDBInput_19 = null;
				String driverClass_tDBInput_19 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_19);
				String dbUser_tDBInput_19 = "root";

				final String decryptedPassword_tDBInput_19 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_19 = decryptedPassword_tDBInput_19;

				String url_tDBInput_19 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_19 = java.sql.DriverManager.getConnection(
						url_tDBInput_19, dbUser_tDBInput_19, dbPwd_tDBInput_19);

				java.sql.Statement stmt_tDBInput_19 = conn_tDBInput_19
						.createStatement();

				String dbquery_tDBInput_19 = "SELECT \n  `dim_tiempo`.`id_tiempo`, \n  `dim_tiempo`.`id_dia`, \n  `dim_tiempo`.`fecha`, \n  `dim_tiempo`.`dow`\nFROM `dim_"
						+ "tiempo`";

				globalMap.put("tDBInput_19_QUERY", dbquery_tDBInput_19);
				java.sql.ResultSet rs_tDBInput_19 = null;

				try {
					rs_tDBInput_19 = stmt_tDBInput_19
							.executeQuery(dbquery_tDBInput_19);
					java.sql.ResultSetMetaData rsmd_tDBInput_19 = rs_tDBInput_19
							.getMetaData();
					int colQtyInRs_tDBInput_19 = rsmd_tDBInput_19
							.getColumnCount();

					String tmpContent_tDBInput_19 = null;

					while (rs_tDBInput_19.next()) {
						nb_line_tDBInput_19++;

						if (colQtyInRs_tDBInput_19 < 1) {
							row7.id_tiempo = 0;
						} else {

							if (rs_tDBInput_19.getObject(1) != null) {
								row7.id_tiempo = rs_tDBInput_19.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_19 < 2) {
							row7.id_dia = 0;
						} else {

							if (rs_tDBInput_19.getObject(2) != null) {
								row7.id_dia = rs_tDBInput_19.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_19 < 3) {
							row7.fecha = null;
						} else {

							if (rs_tDBInput_19.getString(3) != null) {
								String dateString_tDBInput_19 = rs_tDBInput_19
										.getString(3);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_19)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_19)) {
									row7.fecha = rs_tDBInput_19.getTimestamp(3);
								} else {
									row7.fecha = (java.util.Date) year0_tDBInput_19
											.clone();
								}
							} else {
								row7.fecha = null;
							}
						}
						if (colQtyInRs_tDBInput_19 < 4) {
							row7.dow = null;
						} else {

							row7.dow = routines.system.JDBCUtil.getString(
									rs_tDBInput_19, 4, false);
						}

						/**
						 * [tDBInput_19 begin ] stop
						 */

						/**
						 * [tDBInput_19 main ] start
						 */

						currentComponent = "tDBInput_19";

						tos_count_tDBInput_19++;

						/**
						 * [tDBInput_19 main ] stop
						 */

						/**
						 * [tDBInput_19 process_data_begin ] start
						 */

						currentComponent = "tDBInput_19";

						/**
						 * [tDBInput_19 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.id_tiempo = row7.id_tiempo;

						row7_HashRow.id_dia = row7.id_dia;

						row7_HashRow.fecha = row7.fecha;

						row7_HashRow.dow = row7.dow;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_19 process_data_end ] start
						 */

						currentComponent = "tDBInput_19";

						/**
						 * [tDBInput_19 process_data_end ] stop
						 */

						/**
						 * [tDBInput_19 end ] start
						 */

						currentComponent = "tDBInput_19";

					}
				} finally {
					if (rs_tDBInput_19 != null) {
						rs_tDBInput_19.close();
					}
					stmt_tDBInput_19.close();
					if (conn_tDBInput_19 != null
							&& !conn_tDBInput_19.isClosed()) {

						conn_tDBInput_19.close();

					}

				}

				globalMap.put("tDBInput_19_NB_LINE", nb_line_tDBInput_19);

				ok_Hash.put("tDBInput_19", true);
				end_Hash.put("tDBInput_19", System.currentTimeMillis());

				/**
				 * [tDBInput_19 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_19 finally ] start
				 */

				currentComponent = "tDBInput_19";

				/**
				 * [tDBInput_19 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_19_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_tiempo;

		public int getId_tiempo() {
			return this.id_tiempo;
		}

		public int id_dia;

		public int getId_dia() {
			return this.id_dia;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public String dow;

		public String getDow() {
			return this.dow;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.fecha == null) ? 0 : this.fecha.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.fecha == null) {
				if (other.fecha != null)
					return false;

			} else if (!this.fecha.equals(other.fecha))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.id_tiempo = this.id_tiempo;
			other.id_dia = this.id_dia;
			other.fecha = this.fecha;
			other.dow = this.dow;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.fecha = this.fecha;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.fecha = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_tiempo = dis.readInt();

				this.id_dia = dis.readInt();

				this.dow = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_tiempo);

				dos.writeInt(this.id_dia);

				writeString(this.dow, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tiempo=" + String.valueOf(id_tiempo));
			sb.append(",id_dia=" + String.valueOf(id_dia));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",dow=" + dow);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fecha, other.fecha);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_21Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_21",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row8 = 0;

				class BytesLimit65535_tAdvancedHash_row8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row8().limitLog4jByte();

				// connection name:row8
				// source node:tDBInput_21 - inputs:(after_tDBInput_7)
				// outputs:(row8,row8) | target node:tAdvancedHash_row8 -
				// inputs:(row8) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tDBInput_21 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_21",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_21", false);
				start_Hash.put("tDBInput_21", System.currentTimeMillis());

				currentComponent = "tDBInput_21";

				int tos_count_tDBInput_21 = 0;

				class BytesLimit65535_tDBInput_21 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_21().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_21 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_21.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_21 = calendar_tDBInput_21
						.getTime();
				int nb_line_tDBInput_21 = 0;
				java.sql.Connection conn_tDBInput_21 = null;
				String driverClass_tDBInput_21 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_21);
				String dbUser_tDBInput_21 = "root";

				final String decryptedPassword_tDBInput_21 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_21 = decryptedPassword_tDBInput_21;

				String url_tDBInput_21 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_21 = java.sql.DriverManager.getConnection(
						url_tDBInput_21, dbUser_tDBInput_21, dbPwd_tDBInput_21);

				java.sql.Statement stmt_tDBInput_21 = conn_tDBInput_21
						.createStatement();

				String dbquery_tDBInput_21 = "SELECT \n  `dim_tiempo`.`id_tiempo`, \n  `dim_tiempo`.`id_dia`, \n  `dim_tiempo`.`fecha`, \n  `dim_tiempo`.`dow`\nFROM `dim_"
						+ "tiempo`";

				globalMap.put("tDBInput_21_QUERY", dbquery_tDBInput_21);
				java.sql.ResultSet rs_tDBInput_21 = null;

				try {
					rs_tDBInput_21 = stmt_tDBInput_21
							.executeQuery(dbquery_tDBInput_21);
					java.sql.ResultSetMetaData rsmd_tDBInput_21 = rs_tDBInput_21
							.getMetaData();
					int colQtyInRs_tDBInput_21 = rsmd_tDBInput_21
							.getColumnCount();

					String tmpContent_tDBInput_21 = null;

					while (rs_tDBInput_21.next()) {
						nb_line_tDBInput_21++;

						if (colQtyInRs_tDBInput_21 < 1) {
							row8.id_tiempo = 0;
						} else {

							if (rs_tDBInput_21.getObject(1) != null) {
								row8.id_tiempo = rs_tDBInput_21.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_21 < 2) {
							row8.id_dia = 0;
						} else {

							if (rs_tDBInput_21.getObject(2) != null) {
								row8.id_dia = rs_tDBInput_21.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_21 < 3) {
							row8.fecha = null;
						} else {

							if (rs_tDBInput_21.getString(3) != null) {
								String dateString_tDBInput_21 = rs_tDBInput_21
										.getString(3);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_21)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_21)) {
									row8.fecha = rs_tDBInput_21.getTimestamp(3);
								} else {
									row8.fecha = (java.util.Date) year0_tDBInput_21
											.clone();
								}
							} else {
								row8.fecha = null;
							}
						}
						if (colQtyInRs_tDBInput_21 < 4) {
							row8.dow = null;
						} else {

							row8.dow = routines.system.JDBCUtil.getString(
									rs_tDBInput_21, 4, false);
						}

						/**
						 * [tDBInput_21 begin ] stop
						 */

						/**
						 * [tDBInput_21 main ] start
						 */

						currentComponent = "tDBInput_21";

						tos_count_tDBInput_21++;

						/**
						 * [tDBInput_21 main ] stop
						 */

						/**
						 * [tDBInput_21 process_data_begin ] start
						 */

						currentComponent = "tDBInput_21";

						/**
						 * [tDBInput_21 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.id_tiempo = row8.id_tiempo;

						row8_HashRow.id_dia = row8.id_dia;

						row8_HashRow.fecha = row8.fecha;

						row8_HashRow.dow = row8.dow;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_21 process_data_end ] start
						 */

						currentComponent = "tDBInput_21";

						/**
						 * [tDBInput_21 process_data_end ] stop
						 */

						/**
						 * [tDBInput_21 end ] start
						 */

						currentComponent = "tDBInput_21";

					}
				} finally {
					if (rs_tDBInput_21 != null) {
						rs_tDBInput_21.close();
					}
					stmt_tDBInput_21.close();
					if (conn_tDBInput_21 != null
							&& !conn_tDBInput_21.isClosed()) {

						conn_tDBInput_21.close();

					}

				}

				globalMap.put("tDBInput_21_NB_LINE", nb_line_tDBInput_21);

				ok_Hash.put("tDBInput_21", true);
				end_Hash.put("tDBInput_21", System.currentTimeMillis());

				/**
				 * [tDBInput_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_21 finally ] start
				 */

				currentComponent = "tDBInput_21";

				/**
				 * [tDBInput_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_21_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Fact_Ventas = new byte[0];
		static byte[] commonByteArray_SSDTPO_Fact_Ventas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_tiempo;

		public int getId_tiempo() {
			return this.id_tiempo;
		}

		public int id_dia;

		public int getId_dia() {
			return this.id_dia;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public String dow;

		public String getDow() {
			return this.dow;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.fecha == null) ? 0 : this.fecha.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.fecha == null) {
				if (other.fecha != null)
					return false;

			} else if (!this.fecha.equals(other.fecha))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.id_tiempo = this.id_tiempo;
			other.id_dia = this.id_dia;
			other.fecha = this.fecha;
			other.dow = this.dow;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.fecha = this.fecha;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Fact_Ventas) {

				try {

					int length = 0;

					this.fecha = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_tiempo = dis.readInt();

				this.id_dia = dis.readInt();

				this.dow = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_tiempo);

				dos.writeInt(this.id_dia);

				writeString(this.dow, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tiempo=" + String.valueOf(id_tiempo));
			sb.append(",id_dia=" + String.valueOf(id_dia));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",dow=" + dow);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fecha, other.fecha);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_23Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_23",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row9 = 0;

				class BytesLimit65535_tAdvancedHash_row9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row9().limitLog4jByte();

				// connection name:row9
				// source node:tDBInput_23 - inputs:(after_tDBInput_7)
				// outputs:(row9,row9) | target node:tAdvancedHash_row9 -
				// inputs:(row9) outputs:()
				// linked node: tMap_1 -
				// inputs:(row1,row2,row3,row4,row5,row6,row7,row8,row9)
				// outputs:(fact_ventas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tDBInput_23 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_23",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_23", false);
				start_Hash.put("tDBInput_23", System.currentTimeMillis());

				currentComponent = "tDBInput_23";

				int tos_count_tDBInput_23 = 0;

				class BytesLimit65535_tDBInput_23 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_23().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_23 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_23.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_23 = calendar_tDBInput_23
						.getTime();
				int nb_line_tDBInput_23 = 0;
				java.sql.Connection conn_tDBInput_23 = null;
				String driverClass_tDBInput_23 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_23);
				String dbUser_tDBInput_23 = "root";

				final String decryptedPassword_tDBInput_23 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_23 = decryptedPassword_tDBInput_23;

				String url_tDBInput_23 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_23 = java.sql.DriverManager.getConnection(
						url_tDBInput_23, dbUser_tDBInput_23, dbPwd_tDBInput_23);

				java.sql.Statement stmt_tDBInput_23 = conn_tDBInput_23
						.createStatement();

				String dbquery_tDBInput_23 = "SELECT \n  `dim_tiempo`.`id_tiempo`, \n  `dim_tiempo`.`id_dia`, \n  `dim_tiempo`.`fecha`, \n  `dim_tiempo`.`dow`\nFROM `dim_"
						+ "tiempo`";

				globalMap.put("tDBInput_23_QUERY", dbquery_tDBInput_23);
				java.sql.ResultSet rs_tDBInput_23 = null;

				try {
					rs_tDBInput_23 = stmt_tDBInput_23
							.executeQuery(dbquery_tDBInput_23);
					java.sql.ResultSetMetaData rsmd_tDBInput_23 = rs_tDBInput_23
							.getMetaData();
					int colQtyInRs_tDBInput_23 = rsmd_tDBInput_23
							.getColumnCount();

					String tmpContent_tDBInput_23 = null;

					while (rs_tDBInput_23.next()) {
						nb_line_tDBInput_23++;

						if (colQtyInRs_tDBInput_23 < 1) {
							row9.id_tiempo = 0;
						} else {

							if (rs_tDBInput_23.getObject(1) != null) {
								row9.id_tiempo = rs_tDBInput_23.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_23 < 2) {
							row9.id_dia = 0;
						} else {

							if (rs_tDBInput_23.getObject(2) != null) {
								row9.id_dia = rs_tDBInput_23.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_23 < 3) {
							row9.fecha = null;
						} else {

							if (rs_tDBInput_23.getString(3) != null) {
								String dateString_tDBInput_23 = rs_tDBInput_23
										.getString(3);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_23)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_23)) {
									row9.fecha = rs_tDBInput_23.getTimestamp(3);
								} else {
									row9.fecha = (java.util.Date) year0_tDBInput_23
											.clone();
								}
							} else {
								row9.fecha = null;
							}
						}
						if (colQtyInRs_tDBInput_23 < 4) {
							row9.dow = null;
						} else {

							row9.dow = routines.system.JDBCUtil.getString(
									rs_tDBInput_23, 4, false);
						}

						/**
						 * [tDBInput_23 begin ] stop
						 */

						/**
						 * [tDBInput_23 main ] start
						 */

						currentComponent = "tDBInput_23";

						tos_count_tDBInput_23++;

						/**
						 * [tDBInput_23 main ] stop
						 */

						/**
						 * [tDBInput_23 process_data_begin ] start
						 */

						currentComponent = "tDBInput_23";

						/**
						 * [tDBInput_23 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row9 main ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						row9Struct row9_HashRow = new row9Struct();

						row9_HashRow.id_tiempo = row9.id_tiempo;

						row9_HashRow.id_dia = row9.id_dia;

						row9_HashRow.fecha = row9.fecha;

						row9_HashRow.dow = row9.dow;

						tHash_Lookup_row9.put(row9_HashRow);

						tos_count_tAdvancedHash_row9++;

						/**
						 * [tAdvancedHash_row9 main ] stop
						 */

						/**
						 * [tAdvancedHash_row9 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						/**
						 * [tAdvancedHash_row9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row9 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						/**
						 * [tAdvancedHash_row9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_23 process_data_end ] start
						 */

						currentComponent = "tDBInput_23";

						/**
						 * [tDBInput_23 process_data_end ] stop
						 */

						/**
						 * [tDBInput_23 end ] start
						 */

						currentComponent = "tDBInput_23";

					}
				} finally {
					if (rs_tDBInput_23 != null) {
						rs_tDBInput_23.close();
					}
					stmt_tDBInput_23.close();
					if (conn_tDBInput_23 != null
							&& !conn_tDBInput_23.isClosed()) {

						conn_tDBInput_23.close();

					}

				}

				globalMap.put("tDBInput_23_NB_LINE", nb_line_tDBInput_23);

				ok_Hash.put("tDBInput_23", true);
				end_Hash.put("tDBInput_23", System.currentTimeMillis());

				/**
				 * [tDBInput_23 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_23 finally ] start
				 */

				currentComponent = "tDBInput_23";

				/**
				 * [tDBInput_23 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_23_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Fact_Ventas Fact_VentasClass = new Fact_Ventas();

		int exitCode = Fact_VentasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Fact_Ventas.class.getClassLoader()
					.getResourceAsStream(
							"ssdtpo/fact_ventas_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = Fact_Ventas.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		try {
			runTrace.openSocket(!isChildJob);
			runTrace.startThreadTrace(clientHost, portTraces);
		} catch (java.io.IOException ioException) {
			ioException.printStackTrace();
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_7) {
			globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

			e_tDBInput_7.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Fact_Ventas");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		runTrace.stopThreadTrace();
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 246075 characters generated by Talend Open Studio for Data Integration on the
 * 31 de octubre de 2018 20:36:31 ART
 ************************************************************************************************/
