// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ssdtpo.dimensiones_1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Dimensiones_1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Dimensiones_1 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Dimensiones_1";
	private final String projectName = "SSDTPO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();
	private RunTrace runTrace = new RunTrace();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Dimensiones_1.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Dimensiones_1.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class dim_categoriaStruct implements
			routines.system.IPersistableRow<dim_categoriaStruct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_1 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_categoria;

		public int getId_categoria() {
			return this.id_categoria;
		}

		public int codigo_categoria;

		public int getCodigo_categoria() {
			return this.codigo_categoria;
		}

		public String nombre_categoria;

		public String getNombre_categoria() {
			return this.nombre_categoria;
		}

		public String descripcion;

		public String getDescripcion() {
			return this.descripcion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_categoria;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dim_categoriaStruct other = (dim_categoriaStruct) obj;

			if (this.id_categoria != other.id_categoria)
				return false;

			return true;
		}

		public void copyDataTo(dim_categoriaStruct other) {

			other.id_categoria = this.id_categoria;
			other.codigo_categoria = this.codigo_categoria;
			other.nombre_categoria = this.nombre_categoria;
			other.descripcion = this.descripcion;

		}

		public void copyKeysDataTo(dim_categoriaStruct other) {

			other.id_categoria = this.id_categoria;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_1.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_1.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_1, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_1) {

				try {

					int length = 0;

					this.id_categoria = dis.readInt();

					this.codigo_categoria = dis.readInt();

					this.nombre_categoria = readString(dis);

					this.descripcion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_categoria);

				// int

				dos.writeInt(this.codigo_categoria);

				// String

				writeString(this.nombre_categoria, dos);

				// String

				writeString(this.descripcion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_categoria=" + String.valueOf(id_categoria));
			sb.append(",codigo_categoria=" + String.valueOf(codigo_categoria));
			sb.append(",nombre_categoria=" + nombre_categoria);
			sb.append(",descripcion=" + descripcion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dim_categoriaStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_categoria,
					other.id_categoria);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_1 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_1 = new byte[0];

		public Integer IDCATEGORIA;

		public Integer getIDCATEGORIA() {
			return this.IDCATEGORIA;
		}

		public String NOMBRECATEGORIA;

		public String getNOMBRECATEGORIA() {
			return this.NOMBRECATEGORIA;
		}

		public String DESCRIPCION;

		public String getDESCRIPCION() {
			return this.DESCRIPCION;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_1.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_1.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_1, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_1) {

				try {

					int length = 0;

					this.IDCATEGORIA = readInteger(dis);

					this.NOMBRECATEGORIA = readString(dis);

					this.DESCRIPCION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDCATEGORIA, dos);

				// String

				writeString(this.NOMBRECATEGORIA, dos);

				// String

				writeString(this.DESCRIPCION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDCATEGORIA=" + String.valueOf(IDCATEGORIA));
			sb.append(",NOMBRECATEGORIA=" + NOMBRECATEGORIA);
			sb.append(",DESCRIPCION=" + DESCRIPCION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				dim_categoriaStruct dim_categoria = new dim_categoriaStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_2",
						Boolean.FALSE);

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("dim_categoria"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				class BytesLimit65535_tDBOutput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_3().limitLog4jByte();

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "dim_categoria";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbProperties_tDBOutput_3 = "noDatetimeStringSync=true";
				String url_tDBOutput_3 = null;
				if (dbProperties_tDBOutput_3 == null
						|| dbProperties_tDBOutput_3.trim().length() == 0) {
					url_tDBOutput_3 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_3 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ properties_tDBOutput_3;
				}
				String driverClass_tDBOutput_3 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				String insert_tDBOutput_3 = "INSERT INTO `"
						+ "dim_categoria"
						+ "` (`id_categoria`,`codigo_categoria`,`nombre_categoria`,`descripcion`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_2",
						Boolean.FALSE);

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				dim_categoriaStruct dim_categoria_tmp = new dim_categoriaStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_2",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_2);

				String url_tDBInput_2 = "jdbc:ucanaccess://"
						+ "/Users/erikannunez/Documents/GitHub/ssd-tpo/TP_Integrador_BIDW/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_2 = "";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
				atnParamsPrope_tDBInput_2.put("user", dbUser_tDBInput_2);
				atnParamsPrope_tDBInput_2.put("password", dbPwd_tDBInput_2);
				atnParamsPrope_tDBInput_2
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_2.getBytes()));
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(
						url_tDBInput_2, atnParamsPrope_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  [CATEGORÍAS].[IDCATEGORÍA], \n  [CATEGORÍAS].[NOMBRECATEGORÍA], \n  [CATEGORÍAS].[DESCRIPCIÓN], \n  [CATEGORÍAS]"
						+ ".IMAGEN\nFROM [CATEGORÍAS]";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row1.IDCATEGORIA = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row1.IDCATEGORIA = rs_tDBInput_2.getInt(1);
							} else {
								row1.IDCATEGORIA = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row1.NOMBRECATEGORIA = null;
						} else {

							row1.NOMBRECATEGORIA = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row1.DESCRIPCION = null;
						} else {

							row1.DESCRIPCION = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						if (row1 != null) {
							globalMap.put(
									"ENABLE_TRACES_CONNECTION_tDBInput_2",
									Boolean.TRUE);
							if (runTrace.isPause()) {
								while (runTrace.isPause()) {
									Thread.sleep(100);
								}
							} else {

								// here we dump the line content for trace
								// purpose
								java.util.LinkedHashMap<String, String> runTraceData = new java.util.LinkedHashMap<String, String>();

								runTraceData.put("IDCATEGORIA",
										String.valueOf(row1.IDCATEGORIA));

								runTraceData.put("NOMBRECATEGORIA",
										String.valueOf(row1.NOMBRECATEGORIA));

								runTraceData.put("DESCRIPCION",
										String.valueOf(row1.DESCRIPCION));

								runTrace.sendTrace("row1", "tDBInput_2",
										runTraceData);
							}

						}

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							dim_categoria = null;

							// # Output table : 'dim_categoria'
							dim_categoria_tmp.id_categoria = 0;
							dim_categoria_tmp.codigo_categoria = row1.IDCATEGORIA;
							dim_categoria_tmp.nombre_categoria = row1.NOMBRECATEGORIA;
							dim_categoria_tmp.descripcion = row1.DESCRIPCION;
							dim_categoria = dim_categoria_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						if (dim_categoria != null) {
							globalMap.put(
									"ENABLE_TRACES_CONNECTION_tDBInput_2",
									Boolean.TRUE);
							if (runTrace.isPause()) {
								while (runTrace.isPause()) {
									Thread.sleep(100);
								}
							} else {

								// here we dump the line content for trace
								// purpose
								java.util.LinkedHashMap<String, String> runTraceData = new java.util.LinkedHashMap<String, String>();

								runTraceData.put("id_categoria", String
										.valueOf(dim_categoria.id_categoria));

								runTraceData
										.put("codigo_categoria",
												String.valueOf(dim_categoria.codigo_categoria));

								runTraceData
										.put("nombre_categoria",
												String.valueOf(dim_categoria.nombre_categoria));

								runTraceData.put("descripcion", String
										.valueOf(dim_categoria.descripcion));

								runTrace.sendTrace("dim_categoria",
										"tDBInput_2", runTraceData);
							}

						}

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "dim_categoria"
						if (dim_categoria != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							// dim_categoria
							// dim_categoria

							if (execStat) {
								runStat.updateStatOnConnection("dim_categoria"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_3 = false;
							pstmt_tDBOutput_3.setInt(1,
									dim_categoria.id_categoria);

							pstmt_tDBOutput_3.setInt(2,
									dim_categoria.codigo_categoria);

							if (dim_categoria.nombre_categoria == null) {
								pstmt_tDBOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(3,
										dim_categoria.nombre_categoria);
							}

							if (dim_categoria.descripcion == null) {
								pstmt_tDBOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(4,
										dim_categoria.descripcion);
							}

							pstmt_tDBOutput_3.addBatch();
							nb_line_tDBOutput_3++;

							batchSizeCounter_tDBOutput_3++;
							if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_3 = 0;
							}
							commitCounter_tDBOutput_3++;

							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_3.commit();
								commitCounter_tDBOutput_3 = 0;

							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "dim_categoria"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						if (!isChildJob
								&& (Boolean) globalMap
										.get("ENABLE_TRACES_CONNECTION_tDBInput_2")) {
							if (globalMap.get("USE_CONDITION") != null
									&& (Boolean) globalMap.get("USE_CONDITION")) {
								if (globalMap.get("TRACE_CONDITION") != null
										&& (Boolean) globalMap
												.get("TRACE_CONDITION")) {
									// if next breakpoint has been clicked on UI
									// or if start job, should wait action of
									// user.
									if (runTrace.isNextBreakpoint()) {
										runTrace.waitForUserAction();
									} else if (runTrace.isNextRow()) {
										runTrace.waitForUserAction();
									}
								} else {
									// if next row has been clicked on UI or if
									// start job, should wait action of user.
									if (runTrace.isNextRow()) {
										runTrace.waitForUserAction();
									}
								}
							} else { // no condition set
								if (runTrace.isNextRow()) {
									runTrace.waitForUserAction();
								} else {
									Thread.sleep(1000);
								}
							}

						}
						globalMap.put("USE_CONDITION", Boolean.FALSE);

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();

				}

				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("dim_categoria"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("finish_tDBOutput_3") == null) {
					if (resourceMap.get("conn_tDBOutput_3") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_3");

							ctn_tDBOutput_3.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
							String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
									+ sqlEx_tDBOutput_3.getMessage();

							System.err.println(errorMessage_tDBOutput_3);
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class dim_proveedorStruct implements
			routines.system.IPersistableRow<dim_proveedorStruct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_1 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_proveedor;

		public int getId_proveedor() {
			return this.id_proveedor;
		}

		public int id_ciudad_proveedor;

		public int getId_ciudad_proveedor() {
			return this.id_ciudad_proveedor;
		}

		public Integer codigo_proveedor;

		public Integer getCodigo_proveedor() {
			return this.codigo_proveedor;
		}

		public String nombre_proveedor;

		public String getNombre_proveedor() {
			return this.nombre_proveedor;
		}

		public String nombre_contacto;

		public String getNombre_contacto() {
			return this.nombre_contacto;
		}

		public String cargo_contacto;

		public String getCargo_contacto() {
			return this.cargo_contacto;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String codigo_postal;

		public String getCodigo_postal() {
			return this.codigo_postal;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String pagina_principal;

		public String getPagina_principal() {
			return this.pagina_principal;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_proveedor;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dim_proveedorStruct other = (dim_proveedorStruct) obj;

			if (this.id_proveedor != other.id_proveedor)
				return false;

			return true;
		}

		public void copyDataTo(dim_proveedorStruct other) {

			other.id_proveedor = this.id_proveedor;
			other.id_ciudad_proveedor = this.id_ciudad_proveedor;
			other.codigo_proveedor = this.codigo_proveedor;
			other.nombre_proveedor = this.nombre_proveedor;
			other.nombre_contacto = this.nombre_contacto;
			other.cargo_contacto = this.cargo_contacto;
			other.direccion = this.direccion;
			other.codigo_postal = this.codigo_postal;
			other.telefono = this.telefono;
			other.fax = this.fax;
			other.pagina_principal = this.pagina_principal;

		}

		public void copyKeysDataTo(dim_proveedorStruct other) {

			other.id_proveedor = this.id_proveedor;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_1.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_1.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_1, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_1) {

				try {

					int length = 0;

					this.id_proveedor = dis.readInt();

					this.id_ciudad_proveedor = dis.readInt();

					this.codigo_proveedor = readInteger(dis);

					this.nombre_proveedor = readString(dis);

					this.nombre_contacto = readString(dis);

					this.cargo_contacto = readString(dis);

					this.direccion = readString(dis);

					this.codigo_postal = readString(dis);

					this.telefono = readString(dis);

					this.fax = readString(dis);

					this.pagina_principal = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_proveedor);

				// int

				dos.writeInt(this.id_ciudad_proveedor);

				// Integer

				writeInteger(this.codigo_proveedor, dos);

				// String

				writeString(this.nombre_proveedor, dos);

				// String

				writeString(this.nombre_contacto, dos);

				// String

				writeString(this.cargo_contacto, dos);

				// String

				writeString(this.direccion, dos);

				// String

				writeString(this.codigo_postal, dos);

				// String

				writeString(this.telefono, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.pagina_principal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_proveedor=" + String.valueOf(id_proveedor));
			sb.append(",id_ciudad_proveedor="
					+ String.valueOf(id_ciudad_proveedor));
			sb.append(",codigo_proveedor=" + String.valueOf(codigo_proveedor));
			sb.append(",nombre_proveedor=" + nombre_proveedor);
			sb.append(",nombre_contacto=" + nombre_contacto);
			sb.append(",cargo_contacto=" + cargo_contacto);
			sb.append(",direccion=" + direccion);
			sb.append(",codigo_postal=" + codigo_postal);
			sb.append(",telefono=" + telefono);
			sb.append(",fax=" + fax);
			sb.append(",pagina_principal=" + pagina_principal);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dim_proveedorStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_proveedor,
					other.id_proveedor);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_1 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_1 = new byte[0];

		public Integer IDPROVEEDOR;

		public Integer getIDPROVEEDOR() {
			return this.IDPROVEEDOR;
		}

		public String NOMBRECOMPANIA;

		public String getNOMBRECOMPANIA() {
			return this.NOMBRECOMPANIA;
		}

		public String NOMBRECONTACTO;

		public String getNOMBRECONTACTO() {
			return this.NOMBRECONTACTO;
		}

		public String CARGOCONTACTO;

		public String getCARGOCONTACTO() {
			return this.CARGOCONTACTO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String PAGINAPRINCIPAL;

		public String getPAGINAPRINCIPAL() {
			return this.PAGINAPRINCIPAL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_1.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_1.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_1, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_1) {

				try {

					int length = 0;

					this.IDPROVEEDOR = readInteger(dis);

					this.NOMBRECOMPANIA = readString(dis);

					this.NOMBRECONTACTO = readString(dis);

					this.CARGOCONTACTO = readString(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELEFONO = readString(dis);

					this.FAX = readString(dis);

					this.PAGINAPRINCIPAL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPROVEEDOR, dos);

				// String

				writeString(this.NOMBRECOMPANIA, dos);

				// String

				writeString(this.NOMBRECONTACTO, dos);

				// String

				writeString(this.CARGOCONTACTO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.FAX, dos);

				// String

				writeString(this.PAGINAPRINCIPAL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPROVEEDOR=" + String.valueOf(IDPROVEEDOR));
			sb.append(",NOMBRECOMPANIA=" + NOMBRECOMPANIA);
			sb.append(",NOMBRECONTACTO=" + NOMBRECONTACTO);
			sb.append(",CARGOCONTACTO=" + CARGOCONTACTO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",FAX=" + FAX);
			sb.append(",PAGINAPRINCIPAL=" + PAGINAPRINCIPAL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_6Struct implements
			routines.system.IPersistableRow<after_tDBInput_6Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_1 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer IDPROVEEDOR;

		public Integer getIDPROVEEDOR() {
			return this.IDPROVEEDOR;
		}

		public String NOMBRECOMPANIA;

		public String getNOMBRECOMPANIA() {
			return this.NOMBRECOMPANIA;
		}

		public String NOMBRECONTACTO;

		public String getNOMBRECONTACTO() {
			return this.NOMBRECONTACTO;
		}

		public String CARGOCONTACTO;

		public String getCARGOCONTACTO() {
			return this.CARGOCONTACTO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String CIUDAD;

		public String getCIUDAD() {
			return this.CIUDAD;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String CODPOSTAL;

		public String getCODPOSTAL() {
			return this.CODPOSTAL;
		}

		public String PAIS;

		public String getPAIS() {
			return this.PAIS;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String FAX;

		public String getFAX() {
			return this.FAX;
		}

		public String PAGINAPRINCIPAL;

		public String getPAGINAPRINCIPAL() {
			return this.PAGINAPRINCIPAL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.IDPROVEEDOR == null) ? 0 : this.IDPROVEEDOR
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_6Struct other = (after_tDBInput_6Struct) obj;

			if (this.IDPROVEEDOR == null) {
				if (other.IDPROVEEDOR != null)
					return false;

			} else if (!this.IDPROVEEDOR.equals(other.IDPROVEEDOR))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_6Struct other) {

			other.IDPROVEEDOR = this.IDPROVEEDOR;
			other.NOMBRECOMPANIA = this.NOMBRECOMPANIA;
			other.NOMBRECONTACTO = this.NOMBRECONTACTO;
			other.CARGOCONTACTO = this.CARGOCONTACTO;
			other.DIRECCION = this.DIRECCION;
			other.CIUDAD = this.CIUDAD;
			other.REGION = this.REGION;
			other.CODPOSTAL = this.CODPOSTAL;
			other.PAIS = this.PAIS;
			other.TELEFONO = this.TELEFONO;
			other.FAX = this.FAX;
			other.PAGINAPRINCIPAL = this.PAGINAPRINCIPAL;

		}

		public void copyKeysDataTo(after_tDBInput_6Struct other) {

			other.IDPROVEEDOR = this.IDPROVEEDOR;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_1.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_1.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_1, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_1) {

				try {

					int length = 0;

					this.IDPROVEEDOR = readInteger(dis);

					this.NOMBRECOMPANIA = readString(dis);

					this.NOMBRECONTACTO = readString(dis);

					this.CARGOCONTACTO = readString(dis);

					this.DIRECCION = readString(dis);

					this.CIUDAD = readString(dis);

					this.REGION = readString(dis);

					this.CODPOSTAL = readString(dis);

					this.PAIS = readString(dis);

					this.TELEFONO = readString(dis);

					this.FAX = readString(dis);

					this.PAGINAPRINCIPAL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.IDPROVEEDOR, dos);

				// String

				writeString(this.NOMBRECOMPANIA, dos);

				// String

				writeString(this.NOMBRECONTACTO, dos);

				// String

				writeString(this.CARGOCONTACTO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.CIUDAD, dos);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.CODPOSTAL, dos);

				// String

				writeString(this.PAIS, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.FAX, dos);

				// String

				writeString(this.PAGINAPRINCIPAL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDPROVEEDOR=" + String.valueOf(IDPROVEEDOR));
			sb.append(",NOMBRECOMPANIA=" + NOMBRECOMPANIA);
			sb.append(",NOMBRECONTACTO=" + NOMBRECONTACTO);
			sb.append(",CARGOCONTACTO=" + CARGOCONTACTO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",CIUDAD=" + CIUDAD);
			sb.append(",REGION=" + REGION);
			sb.append(",CODPOSTAL=" + CODPOSTAL);
			sb.append(",PAIS=" + PAIS);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",FAX=" + FAX);
			sb.append(",PAGINAPRINCIPAL=" + PAGINAPRINCIPAL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.IDPROVEEDOR,
					other.IDPROVEEDOR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_4Process(globalMap);

				row4Struct row4 = new row4Struct();
				dim_proveedorStruct dim_proveedor = new dim_proveedorStruct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_6",
						Boolean.FALSE);

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("dim_proveedor"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				class BytesLimit65535_tDBOutput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_7().limitLog4jByte();

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;

				int rejectedCount_tDBOutput_7 = 0;

				String tableName_tDBOutput_7 = "dim_proveedor";
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				long date_tDBOutput_7;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbProperties_tDBOutput_7 = "noDatetimeStringSync=true";
				String url_tDBOutput_7 = null;
				if (dbProperties_tDBOutput_7 == null
						|| dbProperties_tDBOutput_7.trim().length() == 0) {
					url_tDBOutput_7 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_7 = "jdbc:mariadb://" + "localhost" + ":"
							+ "3306" + "/" + "DataWarehouse" + "?"
							+ properties_tDBOutput_7;
				}
				String driverClass_tDBOutput_7 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_7 = "root";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				java.lang.Class.forName(driverClass_tDBOutput_7);

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;

				String insert_tDBOutput_7 = "INSERT INTO `"
						+ "dim_proveedor"
						+ "` (`id_proveedor`,`id_ciudad_proveedor`,`codigo_proveedor`,`nombre_proveedor`,`nombre_contacto`,`cargo_contacto`,`direccion`,`codigo_postal`,`telefono`,`fax`,`pagina_principal`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_7 = 100;
				int batchSizeCounter_tDBOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_6",
						Boolean.FALSE);

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				class BytesLimit65535_tMap_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_3().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				dim_proveedorStruct dim_proveedor_tmp = new dim_proveedorStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_6",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				class BytesLimit65535_tDBInput_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_6().limitLog4jByte();

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.ucanaccess.jdbc.UcanaccessDriver";
				java.lang.Class.forName(driverClass_tDBInput_6);

				String url_tDBInput_6 = "jdbc:ucanaccess://"
						+ "/Users/erikannunez/Documents/GitHub/ssd-tpo/TP_Integrador_BIDW/Neptuno.mdb"
						+ ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
				String dbUser_tDBInput_6 = "";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String atnParams_tDBInput_6 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
				atnParams_tDBInput_6 = atnParams_tDBInput_6.replaceAll("&",
						"\n");
				java.util.Properties atnParamsPrope_tDBInput_6 = new java.util.Properties();
				atnParamsPrope_tDBInput_6.put("user", dbUser_tDBInput_6);
				atnParamsPrope_tDBInput_6.put("password", dbPwd_tDBInput_6);
				atnParamsPrope_tDBInput_6
						.load(new java.io.ByteArrayInputStream(
								atnParams_tDBInput_6.getBytes()));
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, atnParamsPrope_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  PROVEEDORES.IDPROVEEDOR, \n  PROVEEDORES.[NOMBRECOMPAÑÍA], \n  PROVEEDORES.NOMBRECONTACTO, \n  PROVEEDORES.CARGO"
						+ "CONTACTO, \n  PROVEEDORES.[DIRECCIÓN], \n  PROVEEDORES.CIUDAD, \n  PROVEEDORES.[REGIÓN], \n  PROVEEDORES.[CÓDPOSTAL], \n  PRO"
						+ "VEEDORES.[PAÍS], \n  PROVEEDORES.[TELÉFONO], \n  PROVEEDORES.FAX, \n  PROVEEDORES.[PÁGINAPRINCIPAL]\nFROM PROVEEDORES";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row4.IDPROVEEDOR = null;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row4.IDPROVEEDOR = rs_tDBInput_6.getInt(1);
							} else {
								row4.IDPROVEEDOR = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row4.NOMBRECOMPANIA = null;
						} else {

							row4.NOMBRECOMPANIA = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row4.NOMBRECONTACTO = null;
						} else {

							row4.NOMBRECONTACTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 3, false);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row4.CARGOCONTACTO = null;
						} else {

							row4.CARGOCONTACTO = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row4.DIRECCION = null;
						} else {

							row4.DIRECCION = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 5, false);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row4.CIUDAD = null;
						} else {

							row4.CIUDAD = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 6, false);
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row4.REGION = null;
						} else {

							row4.REGION = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 7, false);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row4.CODPOSTAL = null;
						} else {

							row4.CODPOSTAL = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 8, false);
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row4.PAIS = null;
						} else {

							row4.PAIS = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 9, false);
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row4.TELEFONO = null;
						} else {

							row4.TELEFONO = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 10, false);
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row4.FAX = null;
						} else {

							row4.FAX = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 11, false);
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row4.PAGINAPRINCIPAL = null;
						} else {

							row4.PAGINAPRINCIPAL = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 12, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						if (row4 != null) {
							globalMap.put(
									"ENABLE_TRACES_CONNECTION_tDBInput_6",
									Boolean.TRUE);
							if (runTrace.isPause()) {
								while (runTrace.isPause()) {
									Thread.sleep(100);
								}
							} else {

								// here we dump the line content for trace
								// purpose
								java.util.LinkedHashMap<String, String> runTraceData = new java.util.LinkedHashMap<String, String>();

								runTraceData.put("IDPROVEEDOR",
										String.valueOf(row4.IDPROVEEDOR));

								runTraceData.put("NOMBRECOMPANIA",
										String.valueOf(row4.NOMBRECOMPANIA));

								runTraceData.put("NOMBRECONTACTO",
										String.valueOf(row4.NOMBRECONTACTO));

								runTraceData.put("CARGOCONTACTO",
										String.valueOf(row4.CARGOCONTACTO));

								runTraceData.put("DIRECCION",
										String.valueOf(row4.DIRECCION));

								runTraceData.put("CIUDAD",
										String.valueOf(row4.CIUDAD));

								runTraceData.put("REGION",
										String.valueOf(row4.REGION));

								runTraceData.put("CODPOSTAL",
										String.valueOf(row4.CODPOSTAL));

								runTraceData.put("PAIS",
										String.valueOf(row4.PAIS));

								runTraceData.put("TELEFONO",
										String.valueOf(row4.TELEFONO));

								runTraceData.put("FAX",
										String.valueOf(row4.FAX));

								runTraceData.put("PAGINAPRINCIPAL",
										String.valueOf(row4.PAGINAPRINCIPAL));

								runTrace.sendTrace("row4", "tDBInput_6",
										runTraceData);
							}

						}

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row6HashKey.nombre_ciudad = row4.CIUDAD;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.nombre_ciudad = '"
							// + row6HashKey.nombre_ciudad + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							dim_proveedor = null;

							// # Output table : 'dim_proveedor'
							dim_proveedor_tmp.id_proveedor = 0;
							dim_proveedor_tmp.id_ciudad_proveedor = row6.id_ciudad;
							dim_proveedor_tmp.codigo_proveedor = row4.IDPROVEEDOR;
							dim_proveedor_tmp.nombre_proveedor = row4.NOMBRECOMPANIA;
							dim_proveedor_tmp.nombre_contacto = row4.NOMBRECONTACTO;
							dim_proveedor_tmp.cargo_contacto = row4.CARGOCONTACTO;
							dim_proveedor_tmp.direccion = row4.DIRECCION;
							dim_proveedor_tmp.codigo_postal = row4.CODPOSTAL;
							dim_proveedor_tmp.telefono = row4.TELEFONO;
							dim_proveedor_tmp.fax = row4.FAX;
							dim_proveedor_tmp.pagina_principal = row4.PAGINAPRINCIPAL;
							dim_proveedor = dim_proveedor_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						if (dim_proveedor != null) {
							globalMap.put(
									"ENABLE_TRACES_CONNECTION_tDBInput_6",
									Boolean.TRUE);
							if (runTrace.isPause()) {
								while (runTrace.isPause()) {
									Thread.sleep(100);
								}
							} else {

								// here we dump the line content for trace
								// purpose
								java.util.LinkedHashMap<String, String> runTraceData = new java.util.LinkedHashMap<String, String>();

								runTraceData.put("id_proveedor", String
										.valueOf(dim_proveedor.id_proveedor));

								runTraceData
										.put("id_ciudad_proveedor",
												String.valueOf(dim_proveedor.id_ciudad_proveedor));

								runTraceData
										.put("codigo_proveedor",
												String.valueOf(dim_proveedor.codigo_proveedor));

								runTraceData
										.put("nombre_proveedor",
												String.valueOf(dim_proveedor.nombre_proveedor));

								runTraceData
										.put("nombre_contacto",
												String.valueOf(dim_proveedor.nombre_contacto));

								runTraceData.put("cargo_contacto", String
										.valueOf(dim_proveedor.cargo_contacto));

								runTraceData
										.put("direccion",
												String.valueOf(dim_proveedor.direccion));

								runTraceData.put("codigo_postal", String
										.valueOf(dim_proveedor.codigo_postal));

								runTraceData.put("telefono",
										String.valueOf(dim_proveedor.telefono));

								runTraceData.put("fax",
										String.valueOf(dim_proveedor.fax));

								runTraceData
										.put("pagina_principal",
												String.valueOf(dim_proveedor.pagina_principal));

								runTrace.sendTrace("dim_proveedor",
										"tDBInput_6", runTraceData);
							}

						}

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
						// Start of branch "dim_proveedor"
						if (dim_proveedor != null) {

							/**
							 * [tDBOutput_7 main ] start
							 */

							currentComponent = "tDBOutput_7";

							// dim_proveedor
							// dim_proveedor

							if (execStat) {
								runStat.updateStatOnConnection("dim_proveedor"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_7 = false;
							pstmt_tDBOutput_7.setInt(1,
									dim_proveedor.id_proveedor);

							pstmt_tDBOutput_7.setInt(2,
									dim_proveedor.id_ciudad_proveedor);

							if (dim_proveedor.codigo_proveedor == null) {
								pstmt_tDBOutput_7.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_7.setInt(3,
										dim_proveedor.codigo_proveedor);
							}

							if (dim_proveedor.nombre_proveedor == null) {
								pstmt_tDBOutput_7.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(4,
										dim_proveedor.nombre_proveedor);
							}

							if (dim_proveedor.nombre_contacto == null) {
								pstmt_tDBOutput_7.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(5,
										dim_proveedor.nombre_contacto);
							}

							if (dim_proveedor.cargo_contacto == null) {
								pstmt_tDBOutput_7.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(6,
										dim_proveedor.cargo_contacto);
							}

							if (dim_proveedor.direccion == null) {
								pstmt_tDBOutput_7.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(7,
										dim_proveedor.direccion);
							}

							if (dim_proveedor.codigo_postal == null) {
								pstmt_tDBOutput_7.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(8,
										dim_proveedor.codigo_postal);
							}

							if (dim_proveedor.telefono == null) {
								pstmt_tDBOutput_7.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(9,
										dim_proveedor.telefono);
							}

							if (dim_proveedor.fax == null) {
								pstmt_tDBOutput_7.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(10,
										dim_proveedor.fax);
							}

							if (dim_proveedor.pagina_principal == null) {
								pstmt_tDBOutput_7.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_7.setString(11,
										dim_proveedor.pagina_principal);
							}

							pstmt_tDBOutput_7.addBatch();
							nb_line_tDBOutput_7++;

							batchSizeCounter_tDBOutput_7++;
							if (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
								try {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_7 = 0;
							}
							commitCounter_tDBOutput_7++;

							if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

								try {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}
									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_7.commit();
								commitCounter_tDBOutput_7 = 0;

							}

							tos_count_tDBOutput_7++;

							/**
							 * [tDBOutput_7 main ] stop
							 */

							/**
							 * [tDBOutput_7 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_7";

							/**
							 * [tDBOutput_7 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_7 process_data_end ] start
							 */

							currentComponent = "tDBOutput_7";

							/**
							 * [tDBOutput_7 process_data_end ] stop
							 */

						} // End of branch "dim_proveedor"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						if (!isChildJob
								&& (Boolean) globalMap
										.get("ENABLE_TRACES_CONNECTION_tDBInput_6")) {
							if (globalMap.get("USE_CONDITION") != null
									&& (Boolean) globalMap.get("USE_CONDITION")) {
								if (globalMap.get("TRACE_CONDITION") != null
										&& (Boolean) globalMap
												.get("TRACE_CONDITION")) {
									// if next breakpoint has been clicked on UI
									// or if start job, should wait action of
									// user.
									if (runTrace.isNextBreakpoint()) {
										runTrace.waitForUserAction();
									} else if (runTrace.isNextRow()) {
										runTrace.waitForUserAction();
									}
								} else {
									// if next row has been clicked on UI or if
									// start job, should wait action of user.
									if (runTrace.isNextRow()) {
										runTrace.waitForUserAction();
									}
								}
							} else { // no condition set
								if (runTrace.isNextRow()) {
									runTrace.waitForUserAction();
								} else {
									Thread.sleep(1000);
								}
							}

						}
						globalMap.put("USE_CONDITION", Boolean.FALSE);

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					stmt_tDBInput_6.close();

					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (batchSizeCounter_tDBOutput_7 != 0) {
						int countSum_tDBOutput_7 = 0;

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
									: 1);
						}

						insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_7 = 0;

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();

				}

				if (commitCounter_tDBOutput_7 > 0) {

					conn_tDBOutput_7.commit();

				}

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("dim_proveedor"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("finish_tDBOutput_7") == null) {
					if (resourceMap.get("conn_tDBOutput_7") != null) {
						try {

							java.sql.Connection ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
									.get("conn_tDBOutput_7");

							ctn_tDBOutput_7.close();

						} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
							String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
									+ sqlEx_tDBOutput_7.getMessage();

							System.err.println(errorMessage_tDBOutput_7);
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_SSDTPO_Dimensiones_1 = new byte[0];
		static byte[] commonByteArray_SSDTPO_Dimensiones_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_ciudad;

		public int getId_ciudad() {
			return this.id_ciudad;
		}

		public Integer id_pais;

		public Integer getId_pais() {
			return this.id_pais;
		}

		public String nombre_ciudad;

		public String getNombre_ciudad() {
			return this.nombre_ciudad;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.nombre_ciudad == null) ? 0
								: this.nombre_ciudad.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.nombre_ciudad == null) {
				if (other.nombre_ciudad != null)
					return false;

			} else if (!this.nombre_ciudad.equals(other.nombre_ciudad))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id_ciudad = this.id_ciudad;
			other.id_pais = this.id_pais;
			other.nombre_ciudad = this.nombre_ciudad;
			other.region = this.region;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.nombre_ciudad = this.nombre_ciudad;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SSDTPO_Dimensiones_1.length) {
					if (length < 1024
							&& commonByteArray_SSDTPO_Dimensiones_1.length == 0) {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[1024];
					} else {
						commonByteArray_SSDTPO_Dimensiones_1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SSDTPO_Dimensiones_1, 0, length);
				strReturn = new String(commonByteArray_SSDTPO_Dimensiones_1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SSDTPO_Dimensiones_1) {

				try {

					int length = 0;

					this.nombre_ciudad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nombre_ciudad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_ciudad = dis.readInt();

				this.id_pais = readInteger(dis, ois);

				this.region = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id_ciudad);

				writeInteger(this.id_pais, dos, oos);

				writeString(this.region, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_ciudad=" + String.valueOf(id_ciudad));
			sb.append(",id_pais=" + String.valueOf(id_pais));
			sb.append(",nombre_ciudad=" + nombre_ciudad);
			sb.append(",region=" + region);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nombre_ciudad,
					other.nombre_ciudad);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_4",
						Boolean.FALSE);

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				class BytesLimit65535_tAdvancedHash_row6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row6().limitLog4jByte();

				// connection name:row6
				// source node:tDBInput_4 - inputs:(after_tDBInput_6)
				// outputs:(row6,row6) | target node:tAdvancedHash_row6 -
				// inputs:(row6) outputs:()
				// linked node: tMap_3 - inputs:(row4,row6)
				// outputs:(dim_proveedor)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				globalMap.put("ENABLE_TRACES_CONNECTION_tDBInput_4",
						Boolean.FALSE);

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				class BytesLimit65535_tDBInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_4().limitLog4jByte();

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.mariadb.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("2687c2b315ebc542e948b7ce0b6040f9");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:mariadb://" + "localhost" + ":"
						+ "3306" + "/" + "DataWarehouse" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(
						url_tDBInput_4, dbUser_tDBInput_4, dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  `dim_ciudad`.`id_ciudad`, \n  `dim_ciudad`.`id_pais`, \n  `dim_ciudad`.`nombre_ciudad`, \n  `dim_ciudad`.`region"
						+ "`\nFROM `dim_ciudad`";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row6.id_ciudad = 0;
						} else {

							if (rs_tDBInput_4.getObject(1) != null) {
								row6.id_ciudad = rs_tDBInput_4.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row6.id_pais = null;
						} else {

							if (rs_tDBInput_4.getObject(2) != null) {
								row6.id_pais = rs_tDBInput_4.getInt(2);
							} else {
								row6.id_pais = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row6.nombre_ciudad = null;
						} else {

							row6.nombre_ciudad = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row6.region = null;
						} else {

							row6.region = routines.system.JDBCUtil.getString(
									rs_tDBInput_4, 4, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.id_ciudad = row6.id_ciudad;

						row6_HashRow.id_pais = row6.id_pais;

						row6_HashRow.nombre_ciudad = row6.nombre_ciudad;

						row6_HashRow.region = row6.region;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					stmt_tDBInput_4.close();
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

					}

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Dimensiones_1 Dimensiones_1Class = new Dimensiones_1();

		int exitCode = Dimensiones_1Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Dimensiones_1.class
					.getClassLoader().getResourceAsStream(
							"ssdtpo/dimensiones_1_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = Dimensiones_1.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		try {
			runTrace.openSocket(!isChildJob);
			runTrace.startThreadTrace(clientHost, portTraces);
		} catch (java.io.IOException ioException) {
			ioException.printStackTrace();
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_6) {
			globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

			e_tDBInput_6.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Dimensiones_1");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		runTrace.stopThreadTrace();
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 122861 characters generated by Talend Open Studio for Data Integration on the
 * 31 de octubre de 2018 13:15:17 ART
 ************************************************************************************************/
